[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("Radical.Windows.Tests")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v3.0", FrameworkDisplayName="")]
[assembly: System.Windows.Markup.XmlnsDefinition("http://schemas.topics.it/wpf/radical/windows", "Radical.Windows")]
[assembly: System.Windows.Markup.XmlnsDefinition("http://schemas.topics.it/wpf/radical/windows/behaviors", "Radical.Windows.Behaviors")]
[assembly: System.Windows.Markup.XmlnsDefinition("http://schemas.topics.it/wpf/radical/windows/controls", "Radical.Windows.Controls")]
[assembly: System.Windows.Markup.XmlnsDefinition("http://schemas.topics.it/wpf/radical/windows/converters", "Radical.Windows.Converters")]
[assembly: System.Windows.Markup.XmlnsDefinition("http://schemas.topics.it/wpf/radical/windows/effects", "Radical.Windows.Effects")]
[assembly: System.Windows.Markup.XmlnsDefinition("http://schemas.topics.it/wpf/radical/windows/input", "Radical.Windows.Input")]
[assembly: System.Windows.Markup.XmlnsDefinition("http://schemas.topics.it/wpf/radical/windows/markup", "Radical.Windows.Markup")]
[assembly: System.Windows.Markup.XmlnsDefinition("http://schemas.topics.it/wpf/radical/windows/presentation/behaviors", "Radical.Windows.Presentation.Behaviors")]
[assembly: System.Windows.Markup.XmlnsDefinition("http://schemas.topics.it/wpf/radical/windows/presentation/regions", "Radical.Windows.Presentation.Regions")]
namespace Radical.ComponentModel
{
    public interface IEntityCollectionView<T> : Radical.ComponentModel.IEntityView, Radical.ComponentModel.IEntityView<T>, System.Collections.Generic.IEnumerable<Radical.ComponentModel.IEntityItemView<T>>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.Collections.Specialized.INotifyCollectionChanged, System.ComponentModel.IBindingList, System.ComponentModel.IBindingListView, System.ComponentModel.ICollectionView, System.ComponentModel.ICollectionViewFactory, System.ComponentModel.INotifyPropertyChanged, System.ComponentModel.ISupportInitialize, System.ComponentModel.ITypedList { }
}
namespace Radical.ComponentModel.Windows.Input
{
    [System.AttributeUsage(System.AttributeTargets.Method | System.AttributeTargets.All, AllowMultiple=false)]
    public class CommandDescriptionAttribute : System.Attribute
    {
        public CommandDescriptionAttribute(string displayText) { }
        public string DisplayText { get; }
    }
    public interface IDelegateCommand : System.Windows.Input.ICommand
    {
        string DisplayText { get; }
        System.Windows.Input.InputBindingCollection InputBindings { get; }
        Radical.ComponentModel.Windows.Input.IDelegateCommand AddGesture(System.Windows.Input.InputGesture gesture);
        Radical.ComponentModel.Windows.Input.IDelegateCommand AddKeyGesture(System.Windows.Input.Key key);
        Radical.ComponentModel.Windows.Input.IDelegateCommand AddKeyGesture(System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);
        Radical.ComponentModel.Windows.Input.IDelegateCommand AddMonitor(Radical.ComponentModel.IMonitor source);
        Radical.ComponentModel.Windows.Input.IDelegateCommand AddMonitor(params Radical.ComponentModel.IMonitor[] triggers);
        void EvaluateCanExecute();
        Radical.ComponentModel.Windows.Input.IDelegateCommand OnCanExecute(System.Func<object, bool> canExecuteMethod);
        Radical.ComponentModel.Windows.Input.IDelegateCommand OnExecute(System.Action<object> executeMethod);
        Radical.ComponentModel.Windows.Input.IDelegateCommand RemoveMonitor(Radical.ComponentModel.IMonitor source);
        Radical.ComponentModel.Windows.Input.IDelegateCommand WithTrackingPreview(System.Action<Radical.Analytics.AnalyticsEvent> onBeforeTracking);
    }
    [System.AttributeUsage(System.AttributeTargets.Method | System.AttributeTargets.All, AllowMultiple=true)]
    public class KeyBindingAttribute : System.Attribute
    {
        public KeyBindingAttribute(System.Windows.Input.Key key) { }
        public System.Windows.Input.Key Key { get; }
        public System.Windows.Input.ModifierKeys Modifiers { get; set; }
    }
}
namespace Radical.Diagnostics
{
    public class BindingErrorTraceListener : System.Diagnostics.DefaultTraceListener
    {
        public override void Write(string message) { }
        public override void WriteLine(string message) { }
        public static void CloseTrace() { }
        public static void Initialize() { }
        public static void Initialize(System.Diagnostics.SourceLevels level, System.Diagnostics.TraceOptions options) { }
    }
}
namespace Radical.Observers
{
    public class NotifyCollectionChangedMonitor : Radical.Observers.AbstractMonitor<System.Collections.Specialized.INotifyCollectionChanged>
    {
        public NotifyCollectionChangedMonitor() { }
        public NotifyCollectionChangedMonitor(Radical.ComponentModel.IDispatcher dispatcher) { }
        public NotifyCollectionChangedMonitor(System.Collections.Specialized.INotifyCollectionChanged source) { }
        public NotifyCollectionChangedMonitor(System.Collections.Specialized.INotifyCollectionChanged source, Radical.ComponentModel.IDispatcher dispatcher) { }
        public void Observe(System.Collections.Specialized.INotifyCollectionChanged source) { }
        protected override void OnStopMonitoring(bool targetDisposed) { }
        protected override void StartMonitoring(object source) { }
        public static Radical.Observers.NotifyCollectionChangedMonitor For(System.Collections.Specialized.INotifyCollectionChanged source) { }
    }
}
namespace Radical.Win32
{
    public static class Constants
    {
        public const int ACM_OPENA = 1124;
        public const int ACM_OPENW = 1127;
        public const int ADVF_NODATA = 1;
        public const int ADVF_ONLYONCE = 2;
        public const int ADVF_PRIMEFIRST = 4;
        public const int ARW_BOTTOMLEFT = 0;
        public const int ARW_BOTTOMRIGHT = 1;
        public const int ARW_DOWN = 4;
        public const int ARW_HIDE = 8;
        public const int ARW_LEFT = 0;
        public const int ARW_RIGHT = 0;
        public const int ARW_TOPLEFT = 2;
        public const int ARW_TOPRIGHT = 3;
        public const int ARW_UP = 4;
        public const int AUTOAPPEND = 1073741824;
        public const int AUTOAPPEND_OFF = -2147483648;
        public const int AUTOSUGGEST = 268435456;
        public const int AUTOSUGGEST_OFF = 536870912;
        public const int BCM_GETIDEALSIZE = 5633;
        public const int BDR_RAISED = 5;
        public const int BDR_RAISEDINNER = 4;
        public const int BDR_RAISEDOUTER = 1;
        public const int BDR_SUNKEN = 10;
        public const int BDR_SUNKENINNER = 8;
        public const int BDR_SUNKENOUTER = 2;
        public const int BFFM_ENABLEOK = 1125;
        public const int BFFM_INITIALIZED = 1;
        public const int BFFM_SELCHANGED = 2;
        public const int BFFM_SETSELECTION = 1127;
        public const int BF_ADJUST = 8192;
        public const int BF_BOTTOM = 8;
        public const int BF_FLAT = 16384;
        public const int BF_LEFT = 1;
        public const int BF_MIDDLE = 2048;
        public const int BF_RIGHT = 4;
        public const int BF_TOP = 2;
        public const int BITSPIXEL = 12;
        public const int BI_RGB = 0;
        public const int BM_CLICK = 245;
        public const int BM_SETCHECK = 241;
        public const int BM_SETSTATE = 243;
        public const int BN_CLICKED = 0;
        public const int BS_3STATE = 5;
        public const int BS_BOTTOM = 2048;
        public const int BS_CENTER = 768;
        public const int BS_DEFPUSHBUTTON = 1;
        public const int BS_GROUPBOX = 7;
        public const int BS_LEFT = 256;
        public const int BS_MULTILINE = 8192;
        public const int BS_OWNERDRAW = 11;
        public const int BS_PATTERN = 3;
        public const int BS_PUSHBUTTON = 0;
        public const int BS_PUSHLIKE = 4096;
        public const int BS_RADIOBUTTON = 4;
        public const int BS_RIGHT = 512;
        public const int BS_RIGHTBUTTON = 32;
        public const int BS_TOP = 1024;
        public const int BS_VCENTER = 3072;
        public const int CBEM_GETITEMA = 1028;
        public const int CBEM_GETITEMW = 1037;
        public const int CBEM_INSERTITEMA = 1025;
        public const int CBEM_INSERTITEMW = 1035;
        public const int CBEM_SETITEMA = 1029;
        public const int CBEM_SETITEMW = 1036;
        public const int CBEN_ENDEDITA = -805;
        public const int CBEN_ENDEDITW = -806;
        public const int CBN_CLOSEUP = 8;
        public const int CBN_DBLCLK = 2;
        public const int CBN_DROPDOWN = 7;
        public const int CBN_EDITCHANGE = 5;
        public const int CBN_EDITUPDATE = 6;
        public const int CBN_SELCHANGE = 1;
        public const int CBN_SELENDOK = 9;
        public const int CBS_AUTOHSCROLL = 64;
        public const int CBS_DROPDOWN = 2;
        public const int CBS_DROPDOWNLIST = 3;
        public const int CBS_HASSTRINGS = 512;
        public const int CBS_NOINTEGRALHEIGHT = 1024;
        public const int CBS_OWNERDRAWFIXED = 16;
        public const int CBS_OWNERDRAWVARIABLE = 32;
        public const int CBS_SIMPLE = 1;
        public const int CB_ADDSTRING = 323;
        public const int CB_DELETESTRING = 324;
        public const int CB_ERR = -1;
        public const int CB_FINDSTRING = 332;
        public const int CB_FINDSTRINGEXACT = 344;
        public const int CB_GETCURSEL = 327;
        public const int CB_GETDROPPEDSTATE = 343;
        public const int CB_GETEDITSEL = 320;
        public const int CB_GETITEMDATA = 336;
        public const int CB_GETITEMHEIGHT = 340;
        public const int CB_INSERTSTRING = 330;
        public const int CB_LIMITTEXT = 321;
        public const int CB_RESETCONTENT = 331;
        public const int CB_SETCURSEL = 334;
        public const int CB_SETDROPPEDWIDTH = 352;
        public const int CB_SETEDITSEL = 322;
        public const int CB_SETITEMHEIGHT = 339;
        public const int CB_SHOWDROPDOWN = 335;
        public const int CCS_NODIVIDER = 64;
        public const int CCS_NOPARENTALIGN = 8;
        public const int CCS_NORESIZE = 4;
        public const int CC_ANYCOLOR = 256;
        public const int CC_ENABLEHOOK = 16;
        public const int CC_FULLOPEN = 2;
        public const int CC_PREVENTFULLOPEN = 4;
        public const int CC_RGBINIT = 1;
        public const int CC_SHOWHELP = 8;
        public const int CC_SOLIDCOLOR = 128;
        public const int CDDS_ITEM = 65536;
        public const int CDDS_ITEMPOSTPAINT = 65538;
        public const int CDDS_ITEMPREPAINT = 65537;
        public const int CDDS_POSTPAINT = 2;
        public const int CDDS_PREPAINT = 1;
        public const int CDDS_SUBITEM = 131072;
        public const int CDERR_DIALOGFAILURE = 65535;
        public const int CDERR_FINDRESFAILURE = 6;
        public const int CDERR_INITIALIZATION = 2;
        public const int CDERR_LOADRESFAILURE = 7;
        public const int CDERR_LOADSTRFAILURE = 5;
        public const int CDERR_LOCKRESFAILURE = 8;
        public const int CDERR_MEMALLOCFAILURE = 9;
        public const int CDERR_MEMLOCKFAILURE = 10;
        public const int CDERR_NOHINSTANCE = 4;
        public const int CDERR_NOHOOK = 11;
        public const int CDERR_NOTEMPLATE = 3;
        public const int CDERR_REGISTERMSGFAIL = 12;
        public const int CDERR_STRUCTSIZE = 1;
        public const int CDIS_CHECKED = 8;
        public const int CDIS_DEFAULT = 32;
        public const int CDIS_DISABLED = 4;
        public const int CDIS_FOCUS = 16;
        public const int CDIS_GRAYED = 2;
        public const int CDIS_HOT = 64;
        public const int CDIS_INDETERMINATE = 256;
        public const int CDIS_MARKED = 128;
        public const int CDIS_SELECTED = 1;
        public const int CDIS_SHOWKEYBOARDCUES = 512;
        public const int CDRF_DODEFAULT = 0;
        public const int CDRF_NEWFONT = 2;
        public const int CDRF_NOTIFYITEMDRAW = 32;
        public const int CDRF_NOTIFYPOSTPAINT = 16;
        public const int CDRF_NOTIFYSUBITEMDRAW = 32;
        public const int CDRF_SKIPDEFAULT = 4;
        public const int CFERR_MAXLESSTHANMIN = 8194;
        public const int CFERR_NOFONTS = 8193;
        public const int CF_APPLY = 512;
        public const int CF_BITMAP = 2;
        public const int CF_DIB = 8;
        public const int CF_DIF = 5;
        public const int CF_EFFECTS = 256;
        public const int CF_ENABLEHOOK = 8;
        public const int CF_ENHMETAFILE = 14;
        public const int CF_FIXEDPITCHONLY = 16384;
        public const int CF_FORCEFONTEXIST = 65536;
        public const int CF_HDROP = 15;
        public const int CF_INITTOLOGFONTSTRUCT = 64;
        public const int CF_LIMITSIZE = 8192;
        public const int CF_LOCALE = 16;
        public const int CF_METAFILEPICT = 3;
        public const int CF_NOSIMULATIONS = 4096;
        public const int CF_NOVECTORFONTS = 2048;
        public const int CF_NOVERTFONTS = 16777216;
        public const int CF_OEMTEXT = 7;
        public const int CF_PALETTE = 9;
        public const int CF_PENDATA = 10;
        public const int CF_RIFF = 11;
        public const int CF_SCREENFONTS = 1;
        public const int CF_SCRIPTSONLY = 1024;
        public const int CF_SELECTSCRIPT = 4194304;
        public const int CF_SHOWHELP = 4;
        public const int CF_SYLK = 4;
        public const int CF_TEXT = 1;
        public const int CF_TIFF = 6;
        public const int CF_TTONLY = 262144;
        public const int CF_UNICODETEXT = 13;
        public const int CF_WAVE = 12;
        public const int CLR_DEFAULT = -16777216;
        public const int CLR_NONE = -1;
        public const int CLSCTX_INPROC_SERVER = 1;
        public const int CLSCTX_LOCAL_SERVER = 4;
        public const int COLOR_WINDOW = 5;
        public const int CONNECT_E_CANNOTCONNECT = -2147220990;
        public const int CONNECT_E_NOCONNECTION = -2147220992;
        public const int CP_WINANSI = 1004;
        public const int CSC_NAVIGATEBACK = 2;
        public const int CSC_NAVIGATEFORWARD = 1;
        public const int CSIDL_APPDATA = 26;
        public const int CSIDL_COMMON_APPDATA = 35;
        public const int CSIDL_COOKIES = 33;
        public const int CSIDL_DESKTOP = 0;
        public const int CSIDL_DESKTOPDIRECTORY = 16;
        public const int CSIDL_FAVORITES = 6;
        public const int CSIDL_HISTORY = 34;
        public const int CSIDL_INTERNET = 1;
        public const int CSIDL_INTERNET_CACHE = 32;
        public const int CSIDL_LOCAL_APPDATA = 28;
        public const int CSIDL_PERSONAL = 5;
        public const int CSIDL_PROGRAMS = 2;
        public const int CSIDL_PROGRAM_FILES = 38;
        public const int CSIDL_PROGRAM_FILES_COMMON = 43;
        public const int CSIDL_RECENT = 8;
        public const int CSIDL_SENDTO = 9;
        public const int CSIDL_STARTMENU = 11;
        public const int CSIDL_STARTUP = 7;
        public const int CSIDL_SYSTEM = 37;
        public const int CSIDL_TEMPLATES = 21;
        public const int CS_DBLCLKS = 8;
        public const int CS_DROPSHADOW = 131072;
        public const int CTRLINFO_EATS_ESCAPE = 2;
        public const int CTRLINFO_EATS_RETURN = 1;
        public const int CWP_SKIPINVISIBLE = 1;
        public const int CW_USEDEFAULT = -2147483648;
        public const int DCX_CACHE = 2;
        public const int DCX_LOCKWINDOWUPDATE = 1024;
        public const int DCX_WINDOW = 1;
        public const int DEFAULT_GUI_FONT = 17;
        public const int DFCS_BUTTON3STATE = 8;
        public const int DFCS_BUTTONCHECK = 0;
        public const int DFCS_BUTTONPUSH = 16;
        public const int DFCS_BUTTONRADIO = 4;
        public const int DFCS_CAPTIONCLOSE = 0;
        public const int DFCS_CAPTIONHELP = 4;
        public const int DFCS_CAPTIONMAX = 2;
        public const int DFCS_CAPTIONMIN = 1;
        public const int DFCS_CAPTIONRESTORE = 3;
        public const int DFCS_CHECKED = 1024;
        public const int DFCS_FLAT = 16384;
        public const int DFCS_INACTIVE = 256;
        public const int DFCS_MENUARROW = 0;
        public const int DFCS_MENUBULLET = 2;
        public const int DFCS_MENUCHECK = 1;
        public const int DFCS_PUSHED = 512;
        public const int DFCS_SCROLLCOMBOBOX = 5;
        public const int DFCS_SCROLLDOWN = 1;
        public const int DFCS_SCROLLLEFT = 2;
        public const int DFCS_SCROLLRIGHT = 3;
        public const int DFCS_SCROLLUP = 0;
        public const int DFC_BUTTON = 4;
        public const int DFC_CAPTION = 1;
        public const int DFC_MENU = 2;
        public const int DFC_SCROLL = 3;
        public const int DIB_RGB_COLORS = 0;
        public const int DISPATCH_METHOD = 1;
        public const int DISPATCH_PROPERTYGET = 2;
        public const int DISPATCH_PROPERTYPUT = 4;
        public const int DISPID_PROPERTYPUT = -3;
        public const int DISPID_UNKNOWN = -1;
        public const int DISP_E_EXCEPTION = -2147352567;
        public const int DISP_E_MEMBERNOTFOUND = -2147352573;
        public const int DISP_E_PARAMNOTFOUND = -2147352572;
        public const int DI_NORMAL = 3;
        public const int DLGC_WANTALLKEYS = 4;
        public const int DLGC_WANTARROWS = 1;
        public const int DLGC_WANTCHARS = 128;
        public const int DLGC_WANTTAB = 2;
        public const int DRAGDROP_E_ALREADYREGISTERED = -2147221247;
        public const int DRAGDROP_E_NOTREGISTERED = -2147221248;
        public const int DTM_SETFORMATA = 4101;
        public const int DTM_SETFORMATW = 4146;
        public const int DTM_SETMCCOLOR = 4102;
        public const int DTM_SETMCFONT = 4105;
        public const int DTM_SETRANGE = 4100;
        public const int DTM_SETSYSTEMTIME = 4098;
        public const int DTN_CLOSEUP = -753;
        public const int DTN_DATETIMECHANGE = -759;
        public const int DTN_DROPDOWN = -754;
        public const int DTN_FORMATA = -756;
        public const int DTN_FORMATQUERYA = -755;
        public const int DTN_FORMATQUERYW = -742;
        public const int DTN_FORMATW = -743;
        public const int DTN_USERSTRINGA = -758;
        public const int DTN_USERSTRINGW = -745;
        public const int DTN_WMKEYDOWNA = -757;
        public const int DTN_WMKEYDOWNW = -744;
        public const int DTS_LONGDATEFORMAT = 4;
        public const int DTS_RIGHTALIGN = 32;
        public const int DTS_SHOWNONE = 2;
        public const int DTS_TIMEFORMAT = 9;
        public const int DTS_UPDOWN = 1;
        public const int DT_CALCRECT = 1024;
        public const int DT_EDITCONTROL = 8192;
        public const int DT_END_ELLIPSIS = 32768;
        public const int DT_EXPANDTABS = 64;
        public const int DT_LEFT = 0;
        public const int DT_NOCLIP = 256;
        public const int DT_NOPREFIX = 2048;
        public const int DT_RIGHT = 2;
        public const int DT_RTLREADING = 131072;
        public const int DT_SINGLELINE = 32;
        public const int DT_VCENTER = 4;
        public const int DT_WORDBREAK = 16;
        public const int DUPLICATE = 6;
        public const int DUPLICATE_SAME_ACCESS = 2;
        public const int DVASPECT_CONTENT = 1;
        public const int DVASPECT_OPAQUE = 16;
        public const int DVASPECT_TRANSPARENT = 32;
        public const int DV_E_DVASPECT = -2147221397;
        public const int ECM_FIRST = 5376;
        public const int EC_LEFTMARGIN = 1;
        public const int EC_RIGHTMARGIN = 2;
        public const int EDGE_BUMP = 9;
        public const int EDGE_ETCHED = 6;
        public const int EDGE_RAISED = 5;
        public const int EDGE_SUNKEN = 10;
        public const int EMR_POLYTEXTOUTA = 96;
        public const int EMR_POLYTEXTOUTW = 97;
        public const int EM_CANUNDO = 198;
        public const int EM_CHARFROMPOS = 215;
        public const int EM_EMPTYUNDOBUFFER = 205;
        public const int EM_GETLINE = 196;
        public const int EM_GETLINECOUNT = 186;
        public const int EM_GETMODIFY = 184;
        public const int EM_GETPASSWORDCHAR = 210;
        public const int EM_GETSEL = 176;
        public const int EM_LIMITTEXT = 197;
        public const int EM_LINEFROMCHAR = 201;
        public const int EM_LINEINDEX = 187;
        public const int EM_POSFROMCHAR = 214;
        public const int EM_REPLACESEL = 194;
        public const int EM_SCROLL = 181;
        public const int EM_SCROLLCARET = 183;
        public const int EM_SETCUEBANNER = 5377;
        public const int EM_SETMARGINS = 211;
        public const int EM_SETMODIFY = 185;
        public const int EM_SETPASSWORDCHAR = 204;
        public const int EM_SETREADONLY = 207;
        public const int EM_SETSEL = 177;
        public const int EM_UNDO = 199;
        public const int EN_ALIGN_LTR_EC = 1792;
        public const int EN_ALIGN_RTL_EC = 1793;
        public const int EN_CHANGE = 768;
        public const int EN_HSCROLL = 1537;
        public const int EN_VSCROLL = 1538;
        public const int ES_AUTOHSCROLL = 128;
        public const int ES_AUTOVSCROLL = 64;
        public const int ES_CENTER = 1;
        public const int ES_LEFT = 0;
        public const int ES_LOWERCASE = 16;
        public const int ES_MULTILINE = 4;
        public const int ES_NOHIDESEL = 256;
        public const int ES_NUMBER = 8192;
        public const int ES_PASSWORD = 32;
        public const int ES_READONLY = 2048;
        public const int ES_RIGHT = 2;
        public const int ES_UPPERCASE = 8;
        public const int ETO_CLIPPED = 4;
        public const int ETO_OPAQUE = 2;
        public const int E_ABORT = -2147467260;
        public const int E_FAIL = -2147467259;
        public const int E_INVALIDARG = -2147024809;
        public const int E_NOINTERFACE = -2147467262;
        public const int E_NOTIMPL = -2147467263;
        public const int E_OUTOFMEMORY = -2147024882;
        public const int E_UNEXPECTED = -2147418113;
        public const int FADF_BSTR = 256;
        public const int FADF_DISPATCH = 1024;
        public const int FADF_UNKNOWN = 512;
        public const int FADF_VARIANT = 2048;
        public const int FALT = 16;
        public const int FLASHW_ALL = 3;
        public const int FLASHW_CAPTION = 1;
        public const int FLASHW_STOP = 0;
        public const int FLASHW_TIMER = 4;
        public const int FLASHW_TIMERNOFG = 12;
        public const int FLASHW_TRAY = 2;
        public const int FNERR_BUFFERTOOSMALL = 12291;
        public const int FNERR_INVALIDFILENAME = 12290;
        public const int FNERR_SUBCLASSFAILURE = 12289;
        public const int FORMAT_MESSAGE_FROM_SYSTEM = 4096;
        public const int FORMAT_MESSAGE_IGNORE_INSERTS = 512;
        public const int FRERR_BUFFERLENGTHZERO = 16385;
        public const int FSHIFT = 4;
        public const int FVIRTKEY = 1;
        public const int GDI_ERROR = -1;
        public const int GDTR_MAX = 2;
        public const int GDTR_MIN = 1;
        public const int GDT_NONE = 1;
        public const int GDT_VALID = 0;
        public const int GMEM_DDESHARE = 8192;
        public const int GMEM_MOVEABLE = 2;
        public const int GMEM_ZEROINIT = 64;
        public const int GMR_DAYSTATE = 1;
        public const int GMR_VISIBLE = 0;
        public const int GWL_EXSTYLE = -20;
        public const int GWL_HWNDPARENT = -8;
        public const int GWL_ID = -12;
        public const int GWL_STYLE = -16;
        public const int GWL_WNDPROC = -4;
        public const int GW_CHILD = 5;
        public const int GW_HWNDFIRST = 0;
        public const int GW_HWNDLAST = 1;
        public const int GW_HWNDNEXT = 2;
        public const int GW_HWNDPREV = 3;
        public const int HCF_HIGHCONTRASTON = 1;
        public const int HC_ACTION = 0;
        public const int HC_GETNEXT = 1;
        public const int HC_SKIP = 2;
        public const int HDI_ORDER = 128;
        public const int HDM_GETITEMA = 4611;
        public const int HDM_GETITEMCOUNT = 4608;
        public const int HDM_GETITEMW = 4619;
        public const int HDM_INSERTITEMA = 4609;
        public const int HDM_INSERTITEMW = 4618;
        public const int HDM_SETITEMA = 4612;
        public const int HDM_SETITEMW = 4620;
        public const int HDN_BEGINTDRAG = -310;
        public const int HDN_BEGINTRACKA = -306;
        public const int HDN_BEGINTRACKW = -326;
        public const int HDN_DIVIDERDBLCLICKA = -305;
        public const int HDN_DIVIDERDBLCLICKW = -325;
        public const int HDN_ENDDRAG = -311;
        public const int HDN_ENDTRACKA = -307;
        public const int HDN_ENDTRACKW = -327;
        public const int HDN_GETDISPINFOA = -309;
        public const int HDN_GETDISPINFOW = -329;
        public const int HDN_ITEMCHANGEDA = -301;
        public const int HDN_ITEMCHANGEDW = -321;
        public const int HDN_ITEMCHANGINGA = -300;
        public const int HDN_ITEMCHANGINGW = -320;
        public const int HDN_ITEMCLICKA = -302;
        public const int HDN_ITEMCLICKW = -322;
        public const int HDN_ITEMDBLCLICKA = -303;
        public const int HDN_ITEMDBLCLICKW = -323;
        public const int HDN_TRACKA = -308;
        public const int HDN_TRACKW = -328;
        public const int HELPINFO_WINDOW = 1;
        public const int HLP_FILE = 1;
        public const int HLP_KEYWORD = 2;
        public const int HLP_NAVIGATOR = 3;
        public const int HLP_OBJECT = 4;
        public const int HOLLOW_BRUSH = 5;
        public const int HTBOTTOM = 15;
        public const int HTBOTTOMRIGHT = 17;
        public const int HTCAPTION = 2;
        public const int HTCLIENT = 1;
        public const int HTNOWHERE = 0;
        public const int HTTRANSPARENT = -1;
        public const int ICC_BAR_CLASSES = 4;
        public const int ICC_DATE_CLASSES = 256;
        public const int ICC_LISTVIEW_CLASSES = 1;
        public const int ICC_PROGRESS_CLASS = 32;
        public const int ICC_TAB_CLASSES = 8;
        public const int ICC_TREEVIEW_CLASSES = 2;
        public const int ICON_BIG = 1;
        public const int ICON_SMALL = 0;
        public const int IDC_APPSTARTING = 32650;
        public const int IDC_ARROW = 32512;
        public const int IDC_CROSS = 32515;
        public const int IDC_HELP = 32651;
        public const int IDC_IBEAM = 32513;
        public const int IDC_NO = 32648;
        public const int IDC_SIZEALL = 32646;
        public const int IDC_SIZENESW = 32643;
        public const int IDC_SIZENS = 32645;
        public const int IDC_SIZENWSE = 32642;
        public const int IDC_SIZEWE = 32644;
        public const int IDC_UPARROW = 32516;
        public const int IDC_WAIT = 32514;
        public const int IDM_PAGESETUP = 2004;
        public const int IDM_PRINT = 27;
        public const int IDM_PRINTPREVIEW = 2003;
        public const int IDM_PROPERTIES = 28;
        public const int IDM_SAVEAS = 71;
        public const int ILC_COLOR = 0;
        public const int ILC_COLOR16 = 16;
        public const int ILC_COLOR24 = 24;
        public const int ILC_COLOR32 = 32;
        public const int ILC_COLOR4 = 4;
        public const int ILC_COLOR8 = 8;
        public const int ILC_MASK = 1;
        public const int ILD_MASK = 16;
        public const int ILD_NORMAL = 0;
        public const int ILD_ROP = 64;
        public const int ILD_TRANSPARENT = 1;
        public const int ILS_ALPHA = 8;
        public const int ILS_GLOW = 1;
        public const int ILS_NORMAL = 0;
        public const int ILS_SATURATE = 4;
        public const int ILS_SHADOW = 2;
        public const int IMAGE_CURSOR = 2;
        public const int IMAGE_ICON = 1;
        public const int IME_CMODE_FULLSHAPE = 8;
        public const int IME_CMODE_KATAKANA = 2;
        public const int IME_CMODE_NATIVE = 1;
        public const int INET_E_DEFAULT_ACTION = -2146697199;
        public const int INPLACE_E_NOTOOLSPACE = -2147221087;
        public const int KEYEVENTF_KEYUP = 2;
        public const int LANG_NEUTRAL = 0;
        public const int LBN_DBLCLK = 2;
        public const int LBN_SELCHANGE = 1;
        public const int LBS_DISABLENOSCROLL = 4096;
        public const int LBS_EXTENDEDSEL = 2048;
        public const int LBS_HASSTRINGS = 64;
        public const int LBS_MULTICOLUMN = 512;
        public const int LBS_MULTIPLESEL = 8;
        public const int LBS_NOINTEGRALHEIGHT = 256;
        public const int LBS_NOSEL = 16384;
        public const int LBS_NOTIFY = 1;
        public const int LBS_OWNERDRAWFIXED = 16;
        public const int LBS_OWNERDRAWVARIABLE = 32;
        public const int LBS_USETABSTOPS = 128;
        public const int LBS_WANTKEYBOARDINPUT = 1024;
        public const int LB_ADDSTRING = 384;
        public const int LB_DELETESTRING = 386;
        public const int LB_ERR = -1;
        public const int LB_ERRSPACE = -2;
        public const int LB_FINDSTRING = 399;
        public const int LB_FINDSTRINGEXACT = 418;
        public const int LB_GETCARETINDEX = 415;
        public const int LB_GETCURSEL = 392;
        public const int LB_GETITEMHEIGHT = 417;
        public const int LB_GETITEMRECT = 408;
        public const int LB_GETSEL = 391;
        public const int LB_GETSELCOUNT = 400;
        public const int LB_GETSELITEMS = 401;
        public const int LB_GETTEXT = 393;
        public const int LB_GETTEXTLEN = 394;
        public const int LB_GETTOPINDEX = 398;
        public const int LB_INSERTSTRING = 385;
        public const int LB_ITEMFROMPOINT = 425;
        public const int LB_RESETCONTENT = 388;
        public const int LB_SETCOLUMNWIDTH = 405;
        public const int LB_SETCURSEL = 390;
        public const int LB_SETHORIZONTALEXTENT = 404;
        public const int LB_SETITEMHEIGHT = 416;
        public const int LB_SETLOCALE = 421;
        public const int LB_SETSEL = 389;
        public const int LB_SETTABSTOPS = 402;
        public const int LB_SETTOPINDEX = 407;
        public const int LLKHF_ALTDOWN = 32;
        public const int LLKHF_EXTENDED = 1;
        public const int LLKHF_INJECTED = 16;
        public const int LLKHF_UP = 128;
        public const int LOCALE_IFIRSTDAYOFWEEK = 4108;
        public const int LOCK_EXCLUSIVE = 2;
        public const int LOCK_ONLYONCE = 4;
        public const int LOCK_WRITE = 1;
        public const int LOGPIXELSX = 88;
        public const int LOGPIXELSY = 90;
        public const int LVA_ALIGNLEFT = 1;
        public const int LVA_ALIGNTOP = 2;
        public const int LVA_DEFAULT = 0;
        public const int LVA_SNAPTOGRID = 5;
        public const int LVBKIF_SOURCE_NONE = 0;
        public const int LVBKIF_SOURCE_URL = 2;
        public const int LVBKIF_STYLE_NORMAL = 0;
        public const int LVBKIF_STYLE_TILE = 16;
        public const int LVCDI_ITEM = 0;
        public const int LVCF_FMT = 1;
        public const int LVCF_IMAGE = 16;
        public const int LVCF_ORDER = 32;
        public const int LVCF_SUBITEM = 8;
        public const int LVCF_TEXT = 4;
        public const int LVCF_WIDTH = 2;
        public const int LVFI_NEARESTXY = 64;
        public const int LVFI_PARAM = 1;
        public const int LVFI_PARTIAL = 8;
        public const int LVFI_STRING = 2;
        public const int LVGA_FOOTER_CENTER = 16;
        public const int LVGA_FOOTER_LEFT = 8;
        public const int LVGA_FOOTER_RIGHT = 32;
        public const int LVGA_HEADER_CENTER = 2;
        public const int LVGA_HEADER_LEFT = 1;
        public const int LVGA_HEADER_RIGHT = 4;
        public const int LVGF_ALIGN = 8;
        public const int LVGF_FOOTER = 2;
        public const int LVGF_GROUPID = 16;
        public const int LVGF_HEADER = 1;
        public const int LVGF_NONE = 0;
        public const int LVGF_STATE = 4;
        public const int LVGS_COLLAPSED = 1;
        public const int LVGS_HIDDEN = 2;
        public const int LVGS_NORMAL = 0;
        public const int LVHT_ABOVE = 8;
        public const int LVHT_BELOW = 16;
        public const int LVHT_LEFT = 64;
        public const int LVHT_NOWHERE = 1;
        public const int LVHT_ONITEM = 14;
        public const int LVHT_ONITEMICON = 2;
        public const int LVHT_ONITEMLABEL = 4;
        public const int LVHT_ONITEMSTATEICON = 8;
        public const int LVHT_RIGHT = 32;
        public const int LVIF_COLUMNS = 512;
        public const int LVIF_GROUPID = 256;
        public const int LVIF_IMAGE = 2;
        public const int LVIF_INDENT = 16;
        public const int LVIF_PARAM = 4;
        public const int LVIF_STATE = 8;
        public const int LVIF_TEXT = 1;
        public const int LVIM_AFTER = 1;
        public const int LVIR_BOUNDS = 0;
        public const int LVIR_ICON = 1;
        public const int LVIR_LABEL = 2;
        public const int LVIR_SELECTBOUNDS = 3;
        public const int LVIS_CUT = 4;
        public const int LVIS_DROPHILITED = 8;
        public const int LVIS_FOCUSED = 1;
        public const int LVIS_OVERLAYMASK = 3840;
        public const int LVIS_SELECTED = 2;
        public const int LVIS_STATEIMAGEMASK = 61440;
        public const int LVM_ARRANGE = 4118;
        public const int LVM_DELETEALLITEMS = 4105;
        public const int LVM_DELETECOLUMN = 4124;
        public const int LVM_DELETEITEM = 4104;
        public const int LVM_EDITLABELA = 4119;
        public const int LVM_EDITLABELW = 4214;
        public const int LVM_ENABLEGROUPVIEW = 4253;
        public const int LVM_ENSUREVISIBLE = 4115;
        public const int LVM_FINDITEMA = 4109;
        public const int LVM_FINDITEMW = 4179;
        public const int LVM_FIRST = 4096;
        public const int LVM_GETCOLUMNA = 4121;
        public const int LVM_GETCOLUMNW = 4191;
        public const int LVM_GETCOLUMNWIDTH = 4125;
        public const int LVM_GETGROUPINFO = 4245;
        public const int LVM_GETHEADER = 4127;
        public const int LVM_GETHOTITEM = 4157;
        public const int LVM_GETINSERTMARK = 4263;
        public const int LVM_GETINSERTMARKCOLOR = 4267;
        public const int LVM_GETINSERTMARKRECT = 4265;
        public const int LVM_GETISEARCHSTRINGA = 4148;
        public const int LVM_GETISEARCHSTRINGW = 4213;
        public const int LVM_GETITEMA = 4101;
        public const int LVM_GETITEMRECT = 4110;
        public const int LVM_GETITEMSTATE = 4140;
        public const int LVM_GETITEMTEXTA = 4141;
        public const int LVM_GETITEMTEXTW = 4211;
        public const int LVM_GETITEMW = 4171;
        public const int LVM_GETNEXTITEM = 4108;
        public const int LVM_GETSELECTEDCOUNT = 4146;
        public const int LVM_GETSTRINGWIDTHA = 4113;
        public const int LVM_GETSTRINGWIDTHW = 4183;
        public const int LVM_GETSUBITEMRECT = 4152;
        public const int LVM_GETTILEVIEWINFO = 4259;
        public const int LVM_GETTOPINDEX = 4135;
        public const int LVM_HASGROUP = 4257;
        public const int LVM_HITTEST = 4114;
        public const int LVM_INSERTCOLUMNA = 4123;
        public const int LVM_INSERTCOLUMNW = 4193;
        public const int LVM_INSERTGROUP = 4241;
        public const int LVM_INSERTITEMA = 4103;
        public const int LVM_INSERTITEMW = 4173;
        public const int LVM_INSERTMARKHITTEST = 4264;
        public const int LVM_ISGROUPVIEWENABLED = 4271;
        public const int LVM_MOVEITEMTOGROUP = 4250;
        public const int LVM_REDRAWITEMS = 4117;
        public const int LVM_REMOVEALLGROUPS = 4256;
        public const int LVM_REMOVEGROUP = 4246;
        public const int LVM_SCROLL = 4116;
        public const int LVM_SETBKCOLOR = 4097;
        public const int LVM_SETBKIMAGEA = 4164;
        public const int LVM_SETBKIMAGEW = 4234;
        public const int LVM_SETCOLUMNA = 4122;
        public const int LVM_SETCOLUMNW = 4192;
        public const int LVM_SETCOLUMNWIDTH = 4126;
        public const int LVM_SETEXTENDEDLISTVIEWSTYLE = 4150;
        public const int LVM_SETGROUPINFO = 4243;
        public const int LVM_SETIMAGELIST = 4099;
        public const int LVM_SETINFOTIP = 4269;
        public const int LVM_SETINSERTMARK = 4262;
        public const int LVM_SETINSERTMARKCOLOR = 4266;
        public const int LVM_SETITEMA = 4102;
        public const int LVM_SETITEMCOUNT = 4143;
        public const int LVM_SETITEMPOSITION = 4111;
        public const int LVM_SETITEMPOSITION32 = 4145;
        public const int LVM_SETITEMSTATE = 4139;
        public const int LVM_SETITEMTEXTA = 4142;
        public const int LVM_SETITEMTEXTW = 4212;
        public const int LVM_SETITEMW = 4172;
        public const int LVM_SETTEXTBKCOLOR = 4134;
        public const int LVM_SETTEXTCOLOR = 4132;
        public const int LVM_SETTILEVIEWINFO = 4258;
        public const int LVM_SETTOOLTIPS = 4170;
        public const int LVM_SETVIEW = 4238;
        public const int LVM_SORTITEMS = 4144;
        public const int LVM_SUBITEMHITTEST = 4153;
        public const int LVM_UPDATE = 4138;
        public const int LVNI_FOCUSED = 1;
        public const int LVNI_SELECTED = 2;
        public const int LVN_BEGINDRAG = -109;
        public const int LVN_BEGINLABELEDITA = -105;
        public const int LVN_BEGINLABELEDITW = -175;
        public const int LVN_BEGINRDRAG = -111;
        public const int LVN_COLUMNCLICK = -108;
        public const int LVN_ENDLABELEDITA = -106;
        public const int LVN_ENDLABELEDITW = -176;
        public const int LVN_GETDISPINFOA = -150;
        public const int LVN_GETDISPINFOW = -177;
        public const int LVN_GETINFOTIPA = -157;
        public const int LVN_GETINFOTIPW = -158;
        public const int LVN_ITEMACTIVATE = -114;
        public const int LVN_ITEMCHANGED = -101;
        public const int LVN_ITEMCHANGING = -100;
        public const int LVN_KEYDOWN = -155;
        public const int LVN_ODCACHEHINT = -113;
        public const int LVN_ODFINDITEMA = -152;
        public const int LVN_ODFINDITEMW = -179;
        public const int LVN_ODSTATECHANGED = -115;
        public const int LVN_SETDISPINFOA = -151;
        public const int LVN_SETDISPINFOW = -178;
        public const int LVSCW_AUTOSIZE = -1;
        public const int LVSCW_AUTOSIZE_USEHEADER = -2;
        public const int LVSIL_NORMAL = 0;
        public const int LVSIL_SMALL = 1;
        public const int LVSIL_STATE = 2;
        public const int LVS_ALIGNLEFT = 2048;
        public const int LVS_ALIGNTOP = 0;
        public const int LVS_AUTOARRANGE = 256;
        public const int LVS_EDITLABELS = 512;
        public const int LVS_EX_CHECKBOXES = 4;
        public const int LVS_EX_FULLROWSELECT = 32;
        public const int LVS_EX_GRIDLINES = 1;
        public const int LVS_EX_HEADERDRAGDROP = 16;
        public const int LVS_EX_INFOTIP = 1024;
        public const int LVS_EX_ONECLICKACTIVATE = 64;
        public const int LVS_EX_TRACKSELECT = 8;
        public const int LVS_EX_TWOCLICKACTIVATE = 128;
        public const int LVS_EX_UNDERLINEHOT = 2048;
        public const int LVS_ICON = 0;
        public const int LVS_LIST = 3;
        public const int LVS_NOCOLUMNHEADER = 16384;
        public const int LVS_NOLABELWRAP = 128;
        public const int LVS_NOSCROLL = 8192;
        public const int LVS_NOSORTHEADER = 32768;
        public const int LVS_OWNERDATA = 4096;
        public const int LVS_REPORT = 1;
        public const int LVS_SHAREIMAGELISTS = 64;
        public const int LVS_SHOWSELALWAYS = 8;
        public const int LVS_SINGLESEL = 4;
        public const int LVS_SMALLICON = 2;
        public const int LVS_SORTASCENDING = 16;
        public const int LVS_SORTDESCENDING = 32;
        public const int LVTVIF_FIXEDSIZE = 3;
        public const int LVTVIM_COLUMNS = 2;
        public const int LVTVIM_TILESIZE = 1;
        public const int LV_VIEW_TILE = 4;
        public const int LWA_ALPHA = 2;
        public const int LWA_COLORKEY = 1;
        public const int MAX_PATH = 260;
        public const int MB_ICONASTERISK = 64;
        public const int MB_ICONEXCLAMATION = 48;
        public const int MB_ICONHAND = 16;
        public const int MB_ICONQUESTION = 32;
        public const int MB_OK = 0;
        public const int MCHT_CALENDAR = 131072;
        public const int MCHT_CALENDARBK = 131072;
        public const int MCHT_CALENDARDATE = 131073;
        public const int MCHT_CALENDARDATENEXT = 16908289;
        public const int MCHT_CALENDARDATEPREV = 33685505;
        public const int MCHT_CALENDARDAY = 131074;
        public const int MCHT_CALENDARWEEKNUM = 131075;
        public const int MCHT_TITLE = 65536;
        public const int MCHT_TITLEBK = 65536;
        public const int MCHT_TITLEBTNNEXT = 16842755;
        public const int MCHT_TITLEBTNPREV = 33619971;
        public const int MCHT_TITLEMONTH = 65537;
        public const int MCHT_TITLEYEAR = 65538;
        public const int MCHT_TODAYLINK = 196608;
        public const int MCM_GETMAXTODAYWIDTH = 4117;
        public const int MCM_GETMINREQRECT = 4105;
        public const int MCM_GETMONTHRANGE = 4103;
        public const int MCM_GETTODAY = 4109;
        public const int MCM_HITTEST = 4110;
        public const int MCM_SETCOLOR = 4106;
        public const int MCM_SETFIRSTDAYOFWEEK = 4111;
        public const int MCM_SETMAXSELCOUNT = 4100;
        public const int MCM_SETMONTHDELTA = 4116;
        public const int MCM_SETRANGE = 4114;
        public const int MCM_SETSELRANGE = 4102;
        public const int MCM_SETTODAY = 4108;
        public const int MCN_GETDAYSTATE = -747;
        public const int MCN_SELCHANGE = -749;
        public const int MCN_SELECT = -746;
        public const int MCSC_MONTHBK = 4;
        public const int MCSC_TEXT = 1;
        public const int MCSC_TITLEBK = 2;
        public const int MCSC_TITLETEXT = 3;
        public const int MCSC_TRAILINGTEXT = 5;
        public const int MCS_DAYSTATE = 1;
        public const int MCS_MULTISELECT = 2;
        public const int MCS_NOTODAY = 16;
        public const int MCS_NOTODAYCIRCLE = 8;
        public const int MCS_WEEKNUMBERS = 4;
        public const int MDITILE_HORIZONTAL = 1;
        public const int MDITILE_VERTICAL = 0;
        public const int MEMBERID_NIL = -1;
        public const int MFT_MENUBREAK = 64;
        public const int MFT_RIGHTJUSTIFY = 16384;
        public const int MFT_RIGHTORDER = 8192;
        public const int MFT_SEPARATOR = 2048;
        public const int MF_BYCOMMAND = 0;
        public const int MF_BYPOSITION = 1024;
        public const int MF_ENABLED = 0;
        public const int MF_GRAYED = 1;
        public const int MF_POPUP = 16;
        public const int MF_SYSMENU = 8192;
        public const int MIIM_DATA = 32;
        public const int MIIM_ID = 2;
        public const int MIIM_STATE = 1;
        public const int MIIM_SUBMENU = 4;
        public const int MIIM_TYPE = 16;
        public const int MK_CONTROL = 8;
        public const int MK_LBUTTON = 1;
        public const int MK_MBUTTON = 16;
        public const int MK_RBUTTON = 2;
        public const int MK_SHIFT = 4;
        public const int MMIO_ALLOCBUF = 65536;
        public const int MMIO_FINDRIFF = 32;
        public const int MMIO_READ = 0;
        public const int MM_ANISOTROPIC = 8;
        public const int MM_TEXT = 1;
        public const int MNC_EXECUTE = 2;
        public const int MNC_SELECT = 3;
        public const int MONITOR_OFF = 2;
        public const int MONITOR_ON = -1;
        public const int MSAA_MENU_SIG = -1441927155;
        public const int NFR_ANSI = 1;
        public const int NFR_UNICODE = 2;
        public const int NIF_ICON = 2;
        public const int NIF_INFO = 16;
        public const int NIF_MESSAGE = 1;
        public const int NIF_TIP = 4;
        public const int NIM_ADD = 0;
        public const int NIM_DELETE = 2;
        public const int NIM_MODIFY = 1;
        public const int NIN_BALLOONHIDE = 1027;
        public const int NIN_BALLOONSHOW = 1026;
        public const int NIN_BALLOONTIMEOUT = 1028;
        public const int NIN_BALLOONUSERCLICK = 1029;
        public const int NM_CLICK = -2;
        public const int NM_CUSTOMDRAW = -12;
        public const int NM_DBLCLK = -3;
        public const int NM_RCLICK = -5;
        public const int NM_RDBLCLK = -6;
        public const int NM_RELEASEDCAPTURE = -16;
        public const int OBJ_BITMAP = 7;
        public const int OBJ_BRUSH = 2;
        public const int OBJ_DC = 3;
        public const int OBJ_ENHMETADC = 12;
        public const int OBJ_EXTPEN = 11;
        public const int OBJ_FONT = 6;
        public const int OBJ_MEMDC = 10;
        public const int OBJ_METADC = 4;
        public const int OBJ_METAFILE = 9;
        public const int OBJ_PAL = 5;
        public const int OBJ_PEN = 1;
        public const int OBJ_REGION = 8;
        public const int ODS_CHECKED = 8;
        public const int ODS_COMBOBOXEDIT = 4096;
        public const int ODS_DEFAULT = 32;
        public const int ODS_DISABLED = 4;
        public const int ODS_FOCUS = 16;
        public const int ODS_GRAYED = 2;
        public const int ODS_HOTLIGHT = 64;
        public const int ODS_INACTIVE = 128;
        public const int ODS_NOACCEL = 256;
        public const int ODS_NOFOCUSRECT = 512;
        public const int ODS_SELECTED = 1;
        public const int OFN_ALLOWMULTISELECT = 512;
        public const int OFN_CREATEPROMPT = 8192;
        public const int OFN_ENABLEHOOK = 32;
        public const int OFN_ENABLESIZING = 8388608;
        public const int OFN_EXPLORER = 524288;
        public const int OFN_FILEMUSTEXIST = 4096;
        public const int OFN_HIDEREADONLY = 4;
        public const int OFN_NOCHANGEDIR = 8;
        public const int OFN_NODEREFERENCELINKS = 1048576;
        public const int OFN_NOVALIDATE = 256;
        public const int OFN_OVERWRITEPROMPT = 2;
        public const int OFN_PATHMUSTEXIST = 2048;
        public const int OFN_READONLY = 1;
        public const int OFN_SHOWHELP = 16;
        public const int OFN_USESHELLITEM = 16777216;
        public const int OLECLOSE_PROMPTSAVE = 2;
        public const int OLECLOSE_SAVEIFDIRTY = 0;
        public const int OLEIVERB_DISCARDUNDOSTATE = -6;
        public const int OLEIVERB_HIDE = -3;
        public const int OLEIVERB_INPLACEACTIVATE = -5;
        public const int OLEIVERB_PRIMARY = 0;
        public const int OLEIVERB_PROPERTIES = -7;
        public const int OLEIVERB_SHOW = -1;
        public const int OLEIVERB_UIACTIVATE = -4;
        public const int OLEMISC_ACTIVATEWHENVISIBLE = 256;
        public const int OLEMISC_ACTSLIKEBUTTON = 4096;
        public const int OLEMISC_INSIDEOUT = 128;
        public const int OLEMISC_RECOMPOSEONRESIZE = 1;
        public const int OLEMISC_SETCLIENTSITEFIRST = 131072;
        public const int OLE_E_NOCONNECTION = -2147221500;
        public const int OLE_E_PROMPTSAVECANCELLED = -2147221492;
        public const int PATCOPY = 15728673;
        public const int PATINVERT = 5898313;
        public const int PBM_SETBARCOLOR = 1033;
        public const int PBM_SETBKCOLOR = 8193;
        public const int PBM_SETPOS = 1026;
        public const int PBM_SETRANGE = 1025;
        public const int PBM_SETRANGE32 = 1030;
        public const int PBM_SETSTEP = 1028;
        public const int PBS_SMOOTH = 1;
        public const int PDERR_CREATEICFAILURE = 4106;
        public const int PDERR_DEFAULTDIFFERENT = 4108;
        public const int PDERR_DNDMMISMATCH = 4105;
        public const int PDERR_GETDEVMODEFAIL = 4101;
        public const int PDERR_INITFAILURE = 4102;
        public const int PDERR_LOADDRVFAILURE = 4100;
        public const int PDERR_NODEFAULTPRN = 4104;
        public const int PDERR_NODEVICES = 4103;
        public const int PDERR_PARSEFAILURE = 4098;
        public const int PDERR_PRINTERNOTFOUND = 4107;
        public const int PDERR_RETDEFFAILURE = 4099;
        public const int PDERR_SETUPFAILURE = 4097;
        public const int PD_COLLATE = 16;
        public const int PD_DISABLEPRINTTOFILE = 524288;
        public const int PD_ENABLEPRINTHOOK = 4096;
        public const int PD_NOCURRENTPAGE = 8388608;
        public const int PD_NONETWORKBUTTON = 2097152;
        public const int PD_NOPAGENUMS = 8;
        public const int PD_NOSELECTION = 4;
        public const int PD_PRINTTOFILE = 32;
        public const int PD_SHOWHELP = 2048;
        public const int PLANES = 14;
        public const int PM_NOREMOVE = 0;
        public const int PM_NOYIELD = 2;
        public const int PM_REMOVE = 1;
        public const int PRF_CHECKVISIBLE = 1;
        public const int PRF_CHILDREN = 16;
        public const int PRF_CLIENT = 4;
        public const int PRF_ERASEBKGND = 8;
        public const int PRF_NONCLIENT = 2;
        public const int PSD_DISABLEMARGINS = 16;
        public const int PSD_DISABLEORIENTATION = 256;
        public const int PSD_DISABLEPAPER = 512;
        public const int PSD_DISABLEPRINTER = 32;
        public const int PSD_ENABLEPAGESETUPHOOK = 8192;
        public const int PSD_INHUNDREDTHSOFMILLIMETERS = 8;
        public const int PSD_MARGINS = 2;
        public const int PSD_MINMARGINS = 1;
        public const int PSD_NONETWORKBUTTON = 2097152;
        public const int PSD_SHOWHELP = 2048;
        public const int PSM_SETFINISHTEXTA = 1139;
        public const int PSM_SETFINISHTEXTW = 1145;
        public const int PSM_SETTITLEA = 1135;
        public const int PSM_SETTITLEW = 1144;
        public const int PS_DOT = 2;
        public const int PS_SOLID = 0;
        public const int QS_ALLEVENTS = 191;
        public const int QS_ALLINPUT = 255;
        public const int QS_ALLPOSTMESSAGE = 256;
        public const int QS_HOTKEY = 128;
        public const int QS_INPUT = 7;
        public const int QS_KEY = 1;
        public const int QS_MOUSE = 6;
        public const int QS_MOUSEBUTTON = 4;
        public const int QS_MOUSEMOVE = 2;
        public const int QS_PAINT = 32;
        public const int QS_POSTMESSAGE = 8;
        public const int QS_SENDMESSAGE = 64;
        public const int QS_TIMER = 16;
        public const int RB_INSERTBANDA = 1025;
        public const int RB_INSERTBANDW = 1034;
        public const int RDW_ALLCHILDREN = 128;
        public const int RDW_ERASE = 4;
        public const int RDW_FRAME = 1024;
        public const int RDW_INVALIDATE = 1;
        public const int RGN_AND = 1;
        public const int RGN_DIFF = 4;
        public const int RPC_E_CANTCALLOUT_ININPUTSYNCCALL = -2147417843;
        public const int RPC_E_CHANGED_MODE = -2147417850;
        public const int SBARS_SIZEGRIP = 256;
        public const int SBS_HORZ = 0;
        public const int SBS_VERT = 1;
        public const int SBT_NOBORDERS = 256;
        public const int SBT_OWNERDRAW = 4096;
        public const int SBT_POPOUT = 512;
        public const int SBT_RTLREADING = 1024;
        public const int SB_BOTTOM = 7;
        public const int SB_CTL = 2;
        public const int SB_ENDSCROLL = 8;
        public const int SB_GETRECT = 1034;
        public const int SB_GETTEXTA = 1026;
        public const int SB_GETTEXTLENGTHA = 1027;
        public const int SB_GETTEXTLENGTHW = 1036;
        public const int SB_GETTEXTW = 1037;
        public const int SB_GETTIPTEXTA = 1042;
        public const int SB_GETTIPTEXTW = 1043;
        public const int SB_HORZ = 0;
        public const int SB_LEFT = 6;
        public const int SB_LINEDOWN = 1;
        public const int SB_LINELEFT = 0;
        public const int SB_LINERIGHT = 1;
        public const int SB_LINEUP = 0;
        public const int SB_PAGEDOWN = 3;
        public const int SB_PAGELEFT = 2;
        public const int SB_PAGERIGHT = 3;
        public const int SB_PAGEUP = 2;
        public const int SB_RIGHT = 7;
        public const int SB_SETICON = 1039;
        public const int SB_SETPARTS = 1028;
        public const int SB_SETTEXTA = 1025;
        public const int SB_SETTEXTW = 1035;
        public const int SB_SETTIPTEXTA = 1040;
        public const int SB_SETTIPTEXTW = 1041;
        public const int SB_SIMPLE = 1033;
        public const int SB_THUMBPOSITION = 4;
        public const int SB_THUMBTRACK = 5;
        public const int SB_TOP = 6;
        public const int SB_VERT = 1;
        public const int SC_CLOSE = 61536;
        public const int SC_KEYMENU = 61696;
        public const int SC_MAXIMIZE = 61488;
        public const int SC_MINIMIZE = 61472;
        public const int SC_MONITORPOWER = 61808;
        public const int SC_MOVE = 61456;
        public const int SC_RESTORE = 61728;
        public const int SC_SIZE = 61440;
        public const uint SHACF_AUTOAPPEND_FORCE_OFF = 2147483648u;
        public const uint SHACF_AUTOAPPEND_FORCE_ON = 1073741824u;
        public const uint SHACF_AUTOSUGGEST_FORCE_OFF = 536870912u;
        public const uint SHACF_AUTOSUGGEST_FORCE_ON = 268435456u;
        public const uint SHACF_DEFAULT = 0u;
        public const uint SHACF_FILESYSTEM = 1u;
        public const uint SHACF_FILESYS_DIRS = 32u;
        public const uint SHACF_FILESYS_ONLY = 16u;
        public const uint SHACF_URLALL = 6u;
        public const uint SHACF_URLHISTORY = 2u;
        public const uint SHACF_URLMRU = 4u;
        public const uint SHACF_USETAB = 8u;
        public const int SHGFI_ADDOVERLAYS = 32;
        public const int SHGFI_ATTRIBUTES = 2048;
        public const int SHGFI_ATTR_SPECIFIED = 131072;
        public const int SHGFI_DISPLAYNAME = 512;
        public const int SHGFI_EXETYPE = 8192;
        public const int SHGFI_ICON = 256;
        public const int SHGFI_ICONLOCATION = 4096;
        public const int SHGFI_LARGEICON = 0;
        public const int SHGFI_LINKOVERLAY = 32768;
        public const int SHGFI_OPENICON = 2;
        public const int SHGFI_OVERLAYINDEX = 64;
        public const int SHGFI_PIDL = 8;
        public const int SHGFI_SELECTED = 65536;
        public const int SHGFI_SHELLICONSIZE = 4;
        public const int SHGFI_SMALLICON = 1;
        public const int SHGFI_SYSICONINDEX = 16384;
        public const int SHGFI_TYPENAME = 1024;
        public const int SHGFI_USEFILEATTRIBUTES = 16;
        public const int SHGFP_TYPE_CURRENT = 0;
        public const int SIF_ALL = 23;
        public const int SIF_PAGE = 2;
        public const int SIF_POS = 4;
        public const int SIF_RANGE = 1;
        public const int SIF_TRACKPOS = 16;
        public const int SM_ARRANGE = 56;
        public const int SM_CLEANBOOT = 67;
        public const int SM_CMONITORS = 80;
        public const int SM_CMOUSEBUTTONS = 43;
        public const int SM_CXBORDER = 5;
        public const int SM_CXCURSOR = 13;
        public const int SM_CXDOUBLECLK = 36;
        public const int SM_CXDRAG = 68;
        public const int SM_CXEDGE = 45;
        public const int SM_CXFIXEDFRAME = 7;
        public const int SM_CXFOCUSBORDER = 83;
        public const int SM_CXFRAME = 32;
        public const int SM_CXHSCROLL = 21;
        public const int SM_CXHTHUMB = 10;
        public const int SM_CXICON = 11;
        public const int SM_CXICONSPACING = 38;
        public const int SM_CXMAXIMIZED = 61;
        public const int SM_CXMAXTRACK = 59;
        public const int SM_CXMENUCHECK = 71;
        public const int SM_CXMENUSIZE = 54;
        public const int SM_CXMIN = 28;
        public const int SM_CXMINIMIZED = 57;
        public const int SM_CXMINSPACING = 47;
        public const int SM_CXMINTRACK = 34;
        public const int SM_CXSCREEN = 0;
        public const int SM_CXSIZE = 30;
        public const int SM_CXSIZEFRAME = 32;
        public const int SM_CXSMICON = 49;
        public const int SM_CXSMSIZE = 52;
        public const int SM_CXVIRTUALSCREEN = 78;
        public const int SM_CXVSCROLL = 2;
        public const int SM_CYBORDER = 6;
        public const int SM_CYCAPTION = 4;
        public const int SM_CYCURSOR = 14;
        public const int SM_CYDOUBLECLK = 37;
        public const int SM_CYDRAG = 69;
        public const int SM_CYEDGE = 46;
        public const int SM_CYFIXEDFRAME = 8;
        public const int SM_CYFOCUSBORDER = 84;
        public const int SM_CYFRAME = 33;
        public const int SM_CYHSCROLL = 3;
        public const int SM_CYICON = 12;
        public const int SM_CYICONSPACING = 39;
        public const int SM_CYKANJIWINDOW = 18;
        public const int SM_CYMAXIMIZED = 62;
        public const int SM_CYMAXTRACK = 60;
        public const int SM_CYMENU = 15;
        public const int SM_CYMENUCHECK = 72;
        public const int SM_CYMENUSIZE = 55;
        public const int SM_CYMIN = 29;
        public const int SM_CYMINIMIZED = 58;
        public const int SM_CYMINSPACING = 48;
        public const int SM_CYMINTRACK = 35;
        public const int SM_CYSCREEN = 1;
        public const int SM_CYSIZE = 31;
        public const int SM_CYSIZEFRAME = 33;
        public const int SM_CYSMCAPTION = 51;
        public const int SM_CYSMICON = 50;
        public const int SM_CYSMSIZE = 53;
        public const int SM_CYVIRTUALSCREEN = 79;
        public const int SM_CYVSCROLL = 20;
        public const int SM_CYVTHUMB = 9;
        public const int SM_DBCSENABLED = 42;
        public const int SM_DEBUG = 22;
        public const int SM_MENUDROPALIGNMENT = 40;
        public const int SM_MIDEASTENABLED = 74;
        public const int SM_MOUSEPRESENT = 19;
        public const int SM_MOUSEWHEELPRESENT = 75;
        public const int SM_NETWORK = 63;
        public const int SM_PENWINDOWS = 41;
        public const int SM_REMOTESESSION = 4096;
        public const int SM_SAMEDISPLAYFORMAT = 81;
        public const int SM_SECURE = 44;
        public const int SM_SHOWSOUNDS = 70;
        public const int SM_SWAPBUTTON = 23;
        public const int SM_XVIRTUALSCREEN = 76;
        public const int SM_YVIRTUALSCREEN = 77;
        public const int SND_ASYNC = 1;
        public const int SND_FILENAME = 131072;
        public const int SND_LOOP = 8;
        public const int SND_MEMORY = 4;
        public const int SND_NODEFAULT = 2;
        public const int SND_NOSTOP = 16;
        public const int SND_PURGE = 64;
        public const int SND_SYNC = 0;
        public const int SORT_DEFAULT = 0;
        public const int SPI_GETACTIVEWINDOWTRACKING = 4096;
        public const int SPI_GETACTIVEWNDTRKTIMEOUT = 8194;
        public const int SPI_GETANIMATION = 72;
        public const int SPI_GETBORDER = 5;
        public const int SPI_GETCARETWIDTH = 8198;
        public const int SPI_GETCOMBOBOXANIMATION = 4100;
        public const int SPI_GETDEFAULTINPUTLANG = 89;
        public const int SPI_GETDRAGFULLWINDOWS = 38;
        public const int SPI_GETDROPSHADOW = 4132;
        public const int SPI_GETFLATMENU = 4130;
        public const int SPI_GETFONTSMOOTHING = 74;
        public const int SPI_GETFONTSMOOTHINGCONTRAST = 8204;
        public const int SPI_GETFONTSMOOTHINGTYPE = 8202;
        public const int SPI_GETGRADIENTCAPTIONS = 4104;
        public const int SPI_GETHIGHCONTRAST = 66;
        public const int SPI_GETHOTTRACKING = 4110;
        public const int SPI_GETICONTITLELOGFONT = 31;
        public const int SPI_GETICONTITLEWRAP = 25;
        public const int SPI_GETKEYBOARDCUES = 4106;
        public const int SPI_GETKEYBOARDDELAY = 22;
        public const int SPI_GETKEYBOARDPREF = 68;
        public const int SPI_GETKEYBOARDSPEED = 10;
        public const int SPI_GETLISTBOXSMOOTHSCROLLING = 4102;
        public const int SPI_GETMENUANIMATION = 4098;
        public const int SPI_GETMENUDROPALIGNMENT = 27;
        public const int SPI_GETMENUFADE = 4114;
        public const int SPI_GETMENUSHOWDELAY = 106;
        public const int SPI_GETMOUSEHOVERHEIGHT = 100;
        public const int SPI_GETMOUSEHOVERTIME = 102;
        public const int SPI_GETMOUSEHOVERWIDTH = 98;
        public const int SPI_GETMOUSESPEED = 112;
        public const int SPI_GETNONCLIENTMETRICS = 41;
        public const int SPI_GETSELECTIONFADE = 4116;
        public const int SPI_GETSNAPTODEFBUTTON = 95;
        public const int SPI_GETTOOLTIPANIMATION = 4118;
        public const int SPI_GETUIEFFECTS = 4158;
        public const int SPI_GETWHEELSCROLLLINES = 104;
        public const int SPI_GETWORKAREA = 48;
        public const int SPI_ICONHORIZONTALSPACING = 13;
        public const int SPI_ICONVERTICALSPACING = 24;
        public const int SRCCOPY = 13369376;
        public const int SS_CENTER = 1;
        public const int SS_LEFT = 0;
        public const int SS_NOPREFIX = 128;
        public const int SS_OWNERDRAW = 13;
        public const int SS_RIGHT = 2;
        public const int SS_SUNKEN = 4096;
        public const int STARTF_USESHOWWINDOW = 1;
        public const int STATFLAG_DEFAULT = 0;
        public const int STATFLAG_NONAME = 1;
        public const int STATFLAG_NOOPEN = 2;
        public const int STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4;
        public const int STGC_DEFAULT = 0;
        public const int STGC_ONLYIFCURRENT = 2;
        public const int STGC_OVERWRITE = 1;
        public const int STGM_CONVERT = 131072;
        public const int STGM_CREATE = 4096;
        public const int STGM_DELETEONRELEASE = 67108864;
        public const int STGM_READ = 0;
        public const int STGM_READWRITE = 2;
        public const int STGM_SHARE_EXCLUSIVE = 16;
        public const int STGM_TRANSACTED = 65536;
        public const int STGM_WRITE = 1;
        public const int STG_E_ACCESSDENIED = -2147287035;
        public const int STG_E_DISKISWRITEPROTECTED = -2147287021;
        public const int STG_E_FILENOTFOUND = -2147287038;
        public const int STG_E_INSUFFICIENTMEMORY = -2147287032;
        public const int STG_E_INVALIDFUNCTION = -2147287039;
        public const int STG_E_INVALIDHANDLE = -2147287034;
        public const int STG_E_INVALIDPOINTER = -2147287031;
        public const int STG_E_LOCKVIOLATION = -2147287007;
        public const int STG_E_NOMOREFILES = -2147287022;
        public const int STG_E_PATHNOTFOUND = -2147287037;
        public const int STG_E_READFAULT = -2147287010;
        public const int STG_E_SEEKERROR = -2147287015;
        public const int STG_E_SHAREVIOLATION = -2147287008;
        public const int STG_E_TOOMANYOPENFILES = -2147287036;
        public const int STG_E_WRITEFAULT = -2147287011;
        public const int STREAM_SEEK_CUR = 1;
        public const int STREAM_SEEK_END = 2;
        public const int STREAM_SEEK_SET = 0;
        public const int SUBLANG_DEFAULT = 1;
        public const int SWP_DRAWFRAME = 32;
        public const int SWP_HIDEWINDOW = 128;
        public const int SWP_NOACTIVATE = 16;
        public const int SWP_NOMOVE = 2;
        public const int SWP_NOSIZE = 1;
        public const int SWP_NOZORDER = 4;
        public const int SWP_SHOWWINDOW = 64;
        public const int SW_ERASE = 4;
        public const int SW_HIDE = 0;
        public const int SW_INVALIDATE = 2;
        public const int SW_MAX = 10;
        public const int SW_MAXIMIZE = 3;
        public const int SW_MINIMIZE = 6;
        public const int SW_NORMAL = 1;
        public const int SW_RESTORE = 9;
        public const int SW_SCROLLCHILDREN = 1;
        public const int SW_SHOW = 5;
        public const int SW_SHOWMAXIMIZED = 3;
        public const int SW_SHOWMINIMIZED = 2;
        public const int SW_SHOWMINNOACTIVE = 7;
        public const int SW_SHOWNA = 8;
        public const int SW_SHOWNOACTIVATE = 4;
        public const int SW_SMOOTHSCROLL = 16;
        public const int S_FALSE = 1;
        public const int S_OK = 0;
        public const int TBIF_COMMAND = 32;
        public const int TBIF_IMAGE = 1;
        public const int TBIF_SIZE = 64;
        public const int TBIF_STATE = 4;
        public const int TBIF_STYLE = 8;
        public const int TBIF_TEXT = 2;
        public const int TBM_GETPOS = 1024;
        public const int TBM_SETLINESIZE = 1047;
        public const int TBM_SETPAGESIZE = 1045;
        public const int TBM_SETPOS = 1029;
        public const int TBM_SETRANGE = 1030;
        public const int TBM_SETRANGEMAX = 1032;
        public const int TBM_SETRANGEMIN = 1031;
        public const int TBM_SETTIC = 1028;
        public const int TBM_SETTICFREQ = 1044;
        public const int TBN_DROPDOWN = -710;
        public const int TBN_GETBUTTONINFOA = -700;
        public const int TBN_GETBUTTONINFOW = -720;
        public const int TBN_GETDISPINFOA = -716;
        public const int TBN_GETDISPINFOW = -717;
        public const int TBN_GETINFOTIPA = -718;
        public const int TBN_GETINFOTIPW = -719;
        public const int TBN_QUERYINSERT = -706;
        public const int TBSTATE_CHECKED = 1;
        public const int TBSTATE_ENABLED = 4;
        public const int TBSTATE_HIDDEN = 8;
        public const int TBSTATE_INDETERMINATE = 16;
        public const int TBSTYLE_BUTTON = 0;
        public const int TBSTYLE_CHECK = 2;
        public const int TBSTYLE_DROPDOWN = 8;
        public const int TBSTYLE_EX_DRAWDDARROWS = 1;
        public const int TBSTYLE_FLAT = 2048;
        public const int TBSTYLE_LIST = 4096;
        public const int TBSTYLE_SEP = 1;
        public const int TBSTYLE_TOOLTIPS = 256;
        public const int TBSTYLE_WRAPPABLE = 512;
        public const int TBS_AUTOTICKS = 1;
        public const int TBS_BOTH = 8;
        public const int TBS_BOTTOM = 0;
        public const int TBS_NOTICKS = 16;
        public const int TBS_TOP = 4;
        public const int TBS_VERT = 2;
        public const int TB_ADDBUTTONSA = 1044;
        public const int TB_ADDBUTTONSW = 1092;
        public const int TB_ADDSTRINGA = 1052;
        public const int TB_ADDSTRINGW = 1101;
        public const int TB_AUTOSIZE = 1057;
        public const int TB_BOTTOM = 7;
        public const int TB_BUTTONSTRUCTSIZE = 1054;
        public const int TB_DELETEBUTTON = 1046;
        public const int TB_ENABLEBUTTON = 1025;
        public const int TB_ENDTRACK = 8;
        public const int TB_GETBUTTON = 1047;
        public const int TB_GETBUTTONINFOA = 1089;
        public const int TB_GETBUTTONINFOW = 1087;
        public const int TB_GETBUTTONSIZE = 1082;
        public const int TB_GETBUTTONTEXTA = 1069;
        public const int TB_GETBUTTONTEXTW = 1099;
        public const int TB_GETRECT = 1075;
        public const int TB_GETROWS = 1064;
        public const int TB_INSERTBUTTONA = 1045;
        public const int TB_INSERTBUTTONW = 1091;
        public const int TB_ISBUTTONCHECKED = 1034;
        public const int TB_ISBUTTONINDETERMINATE = 1037;
        public const int TB_LINEDOWN = 1;
        public const int TB_LINEUP = 0;
        public const int TB_MAPACCELERATORA = 1102;
        public const int TB_MAPACCELERATORW = 1114;
        public const int TB_PAGEDOWN = 3;
        public const int TB_PAGEUP = 2;
        public const int TB_SAVERESTOREA = 1050;
        public const int TB_SAVERESTOREW = 1100;
        public const int TB_SETBUTTONINFOA = 1090;
        public const int TB_SETBUTTONINFOW = 1088;
        public const int TB_SETBUTTONSIZE = 1055;
        public const int TB_SETEXTENDEDSTYLE = 1108;
        public const int TB_SETIMAGELIST = 1072;
        public const int TB_SETTOOLTIPS = 1060;
        public const int TB_THUMBPOSITION = 4;
        public const int TB_THUMBTRACK = 5;
        public const int TB_TOP = 6;
        public const int TCIF_IMAGE = 2;
        public const int TCIF_TEXT = 1;
        public const int TCM_ADJUSTRECT = 4904;
        public const int TCM_DELETEALLITEMS = 4873;
        public const int TCM_DELETEITEM = 4872;
        public const int TCM_GETCURSEL = 4875;
        public const int TCM_GETITEMA = 4869;
        public const int TCM_GETITEMRECT = 4874;
        public const int TCM_GETITEMW = 4924;
        public const int TCM_GETROWCOUNT = 4908;
        public const int TCM_GETTOOLTIPS = 4909;
        public const int TCM_INSERTITEMA = 4871;
        public const int TCM_INSERTITEMW = 4926;
        public const int TCM_SETCURSEL = 4876;
        public const int TCM_SETIMAGELIST = 4867;
        public const int TCM_SETITEMA = 4870;
        public const int TCM_SETITEMSIZE = 4905;
        public const int TCM_SETITEMW = 4925;
        public const int TCM_SETPADDING = 4907;
        public const int TCM_SETTOOLTIPS = 4910;
        public const int TCN_SELCHANGE = -551;
        public const int TCN_SELCHANGING = -552;
        public const int TCS_BOTTOM = 2;
        public const int TCS_BUTTONS = 256;
        public const int TCS_FIXEDWIDTH = 1024;
        public const int TCS_FLATBUTTONS = 8;
        public const int TCS_HOTTRACK = 64;
        public const int TCS_MULTILINE = 512;
        public const int TCS_OWNERDRAWFIXED = 8192;
        public const int TCS_RAGGEDRIGHT = 2048;
        public const int TCS_RIGHT = 2;
        public const int TCS_RIGHTJUSTIFY = 0;
        public const int TCS_TABS = 0;
        public const int TCS_TOOLTIPS = 16384;
        public const int TCS_VERTICAL = 128;
        public const int TME_HOVER = 1;
        public const int TME_LEAVE = 2;
        public const int TPM_LEFTALIGN = 0;
        public const int TPM_LEFTBUTTON = 0;
        public const int TPM_VERTICAL = 64;
        public const int TRANSPARENT = 1;
        public const int TTDT_AUTOMATIC = 0;
        public const int TTDT_AUTOPOP = 2;
        public const int TTDT_INITIAL = 3;
        public const int TTDT_RESHOW = 1;
        public const int TTF_ABSOLUTE = 128;
        public const int TTF_CENTERTIP = 2;
        public const int TTF_IDISHWND = 1;
        public const int TTF_RTLREADING = 4;
        public const int TTF_SUBCLASS = 16;
        public const int TTF_TRACK = 32;
        public const int TTF_TRANSPARENT = 256;
        public const int TTI_WARNING = 2;
        public const int TTM_ACTIVATE = 1025;
        public const int TTM_ADDTOOLA = 1028;
        public const int TTM_ADDTOOLW = 1074;
        public const int TTM_ADJUSTRECT = 1055;
        public const int TTM_DELTOOLA = 1029;
        public const int TTM_DELTOOLW = 1075;
        public const int TTM_ENUMTOOLSA = 1038;
        public const int TTM_ENUMTOOLSW = 1082;
        public const int TTM_GETCURRENTTOOLA = 1039;
        public const int TTM_GETCURRENTTOOLW = 1083;
        public const int TTM_GETDELAYTIME = 1045;
        public const int TTM_GETTEXTA = 1035;
        public const int TTM_GETTEXTW = 1080;
        public const int TTM_GETTIPBKCOLOR = 1046;
        public const int TTM_GETTIPTEXTCOLOR = 1047;
        public const int TTM_GETTOOLINFOA = 1032;
        public const int TTM_GETTOOLINFOW = 1077;
        public const int TTM_HITTESTA = 1034;
        public const int TTM_HITTESTW = 1079;
        public const int TTM_NEWTOOLRECTA = 1030;
        public const int TTM_NEWTOOLRECTW = 1076;
        public const int TTM_POP = 1052;
        public const int TTM_RELAYEVENT = 1031;
        public const int TTM_SETDELAYTIME = 1027;
        public const int TTM_SETMAXTIPWIDTH = 1048;
        public const int TTM_SETTIPBKCOLOR = 1043;
        public const int TTM_SETTIPTEXTCOLOR = 1044;
        public const int TTM_SETTITLEA = 1056;
        public const int TTM_SETTITLEW = 1057;
        public const int TTM_SETTOOLINFOA = 1033;
        public const int TTM_SETTOOLINFOW = 1078;
        public const int TTM_TRACKACTIVATE = 1041;
        public const int TTM_TRACKPOSITION = 1042;
        public const int TTM_UPDATE = 1053;
        public const int TTM_UPDATETIPTEXTA = 1036;
        public const int TTM_UPDATETIPTEXTW = 1081;
        public const int TTM_WINDOWFROMPOINT = 1040;
        public const int TTN_GETDISPINFOA = -520;
        public const int TTN_GETDISPINFOW = -530;
        public const int TTN_NEEDTEXTA = -520;
        public const int TTN_NEEDTEXTW = -530;
        public const int TTN_POP = -522;
        public const int TTN_SHOW = -521;
        public const int TTS_ALWAYSTIP = 1;
        public const int TTS_BALLOON = 64;
        public const int TTS_NOANIMATE = 16;
        public const int TTS_NOFADE = 32;
        public const int TTS_NOPREFIX = 2;
        public const int TVC_BYKEYBOARD = 2;
        public const int TVC_BYMOUSE = 1;
        public const int TVC_UNKNOWN = 0;
        public const int TVE_COLLAPSE = 1;
        public const int TVE_EXPAND = 2;
        public const int TVGN_CARET = 9;
        public const int TVGN_FIRSTVISIBLE = 5;
        public const int TVGN_NEXT = 1;
        public const int TVGN_NEXTVISIBLE = 6;
        public const int TVGN_PREVIOUS = 2;
        public const int TVGN_PREVIOUSVISIBLE = 7;
        public const int TVHT_ABOVE = 256;
        public const int TVHT_BELOW = 512;
        public const int TVHT_NOWHERE = 1;
        public const int TVHT_ONITEM = 70;
        public const int TVHT_ONITEMBUTTON = 16;
        public const int TVHT_ONITEMICON = 2;
        public const int TVHT_ONITEMINDENT = 8;
        public const int TVHT_ONITEMLABEL = 4;
        public const int TVHT_ONITEMRIGHT = 32;
        public const int TVHT_ONITEMSTATEICON = 64;
        public const int TVHT_TOLEFT = 2048;
        public const int TVHT_TORIGHT = 1024;
        public const int TVIF_HANDLE = 16;
        public const int TVIF_IMAGE = 2;
        public const int TVIF_PARAM = 4;
        public const int TVIF_SELECTEDIMAGE = 32;
        public const int TVIF_STATE = 8;
        public const int TVIF_TEXT = 1;
        public const int TVIS_EXPANDED = 32;
        public const int TVIS_EXPANDEDONCE = 64;
        public const int TVIS_SELECTED = 2;
        public const int TVIS_STATEIMAGEMASK = 61440;
        public const int TVI_FIRST = -65535;
        public const int TVI_ROOT = -65536;
        public const int TVM_DELETEITEM = 4353;
        public const int TVM_EDITLABELA = 4366;
        public const int TVM_EDITLABELW = 4417;
        public const int TVM_ENDEDITLABELNOW = 4374;
        public const int TVM_ENSUREVISIBLE = 4372;
        public const int TVM_EXPAND = 4354;
        public const int TVM_GETEDITCONTROL = 4367;
        public const int TVM_GETINDENT = 4358;
        public const int TVM_GETISEARCHSTRINGA = 4375;
        public const int TVM_GETISEARCHSTRINGW = 4416;
        public const int TVM_GETITEMA = 4364;
        public const int TVM_GETITEMHEIGHT = 4380;
        public const int TVM_GETITEMRECT = 4356;
        public const int TVM_GETITEMW = 4414;
        public const int TVM_GETLINECOLOR = 4393;
        public const int TVM_GETNEXTITEM = 4362;
        public const int TVM_GETVISIBLECOUNT = 4368;
        public const int TVM_HITTEST = 4369;
        public const int TVM_INSERTITEMA = 4352;
        public const int TVM_INSERTITEMW = 4402;
        public const int TVM_SELECTITEM = 4363;
        public const int TVM_SETBKCOLOR = 4381;
        public const int TVM_SETIMAGELIST = 4361;
        public const int TVM_SETINDENT = 4359;
        public const int TVM_SETITEMA = 4365;
        public const int TVM_SETITEMHEIGHT = 4379;
        public const int TVM_SETITEMW = 4415;
        public const int TVM_SETLINECOLOR = 4392;
        public const int TVM_SETTEXTCOLOR = 4382;
        public const int TVM_SETTOOLTIPS = 4376;
        public const int TVM_SORTCHILDRENCB = 4373;
        public const int TVN_BEGINDRAGA = -407;
        public const int TVN_BEGINDRAGW = -456;
        public const int TVN_BEGINLABELEDITA = -410;
        public const int TVN_BEGINLABELEDITW = -459;
        public const int TVN_BEGINRDRAGA = -408;
        public const int TVN_BEGINRDRAGW = -457;
        public const int TVN_ENDLABELEDITA = -411;
        public const int TVN_ENDLABELEDITW = -460;
        public const int TVN_GETDISPINFOA = -403;
        public const int TVN_GETDISPINFOW = -452;
        public const int TVN_GETINFOTIPA = -413;
        public const int TVN_GETINFOTIPW = -414;
        public const int TVN_ITEMEXPANDEDA = -406;
        public const int TVN_ITEMEXPANDEDW = -455;
        public const int TVN_ITEMEXPANDINGA = -405;
        public const int TVN_ITEMEXPANDINGW = -454;
        public const int TVN_SELCHANGEDA = -402;
        public const int TVN_SELCHANGEDW = -451;
        public const int TVN_SELCHANGINGA = -401;
        public const int TVN_SELCHANGINGW = -450;
        public const int TVN_SETDISPINFOA = -404;
        public const int TVN_SETDISPINFOW = -453;
        public const int TVSIL_STATE = 2;
        public const int TVS_CHECKBOXES = 256;
        public const int TVS_EDITLABELS = 8;
        public const int TVS_FULLROWSELECT = 4096;
        public const int TVS_HASBUTTONS = 1;
        public const int TVS_HASLINES = 2;
        public const int TVS_INFOTIP = 2048;
        public const int TVS_LINESATROOT = 4;
        public const int TVS_NOTOOLTIPS = 128;
        public const int TVS_RTLREADING = 64;
        public const int TVS_SHOWSELALWAYS = 32;
        public const int TVS_TRACKSELECT = 512;
        public const int TV_FIRST = 4352;
        public const int TYMED_NULL = 0;
        public const int UISF_HIDEACCEL = 2;
        public const int UISF_HIDEFOCUS = 1;
        public const int UIS_CLEAR = 2;
        public const int UIS_INITIALIZE = 3;
        public const int UIS_SET = 1;
        public const int UOI_FLAGS = 1;
        public const int USERCLASSTYPE_APPNAME = 3;
        public const int USERCLASSTYPE_FULL = 1;
        public const int USERCLASSTYPE_SHORT = 2;
        public const int VIEW_E_DRAW = -2147221184;
        public const int VK_CAPSLOCK = 20;
        public const int VK_CONTROL = 17;
        public const int VK_DOWN = 40;
        public const int VK_ESCAPE = 27;
        public const int VK_LEFT = 37;
        public const int VK_MENU = 18;
        public const int VK_NUMLOCK = 144;
        public const int VK_RIGHT = 39;
        public const int VK_SCROLL = 145;
        public const int VK_SHIFT = 16;
        public const int VK_TAB = 9;
        public const int VK_UP = 38;
        public const int WAVE_FORMAT_ADPCM = 2;
        public const int WAVE_FORMAT_IEEE_FLOAT = 3;
        public const int WAVE_FORMAT_PCM = 1;
        public const int WA_ACTIVE = 1;
        public const int WA_CLICKACTIVE = 2;
        public const int WA_INACTIVE = 0;
        public const int WHEEL_DELTA = 120;
        public const int WH_GETMESSAGE = 3;
        public const int WH_JOURNALPLAYBACK = 1;
        public const int WH_KEYBOARD_LL = 13;
        public const int WH_MOUSE = 7;
        public const int WM_ACTIVATE = 6;
        public const int WM_ACTIVATEAPP = 28;
        public const int WM_AFXFIRST = 864;
        public const int WM_AFXLAST = 895;
        public const int WM_APP = 32768;
        public const int WM_ASKCBFORMATNAME = 780;
        public const int WM_CANCELJOURNAL = 75;
        public const int WM_CANCELMODE = 31;
        public const int WM_CAPTURECHANGED = 533;
        public const int WM_CHANGECBCHAIN = 781;
        public const int WM_CHANGEUISTATE = 295;
        public const int WM_CHAR = 258;
        public const int WM_CHARTOITEM = 47;
        public const int WM_CHILDACTIVATE = 34;
        public const int WM_CHOOSEFONT_GETLOGFONT = 1025;
        public const int WM_CLEAR = 771;
        public const int WM_CLOSE = 16;
        public const int WM_COMMAND = 273;
        public const int WM_COMMNOTIFY = 68;
        public const int WM_COMPACTING = 65;
        public const int WM_COMPAREITEM = 57;
        public const int WM_CONTEXTMENU = 123;
        public const int WM_COPY = 769;
        public const int WM_COPYDATA = 74;
        public const int WM_CREATE = 1;
        public const int WM_CTLCOLOR = 25;
        public const int WM_CTLCOLORBTN = 309;
        public const int WM_CTLCOLORDLG = 310;
        public const int WM_CTLCOLOREDIT = 307;
        public const int WM_CTLCOLORLISTBOX = 308;
        public const int WM_CTLCOLORMSGBOX = 306;
        public const int WM_CTLCOLORSCROLLBAR = 311;
        public const int WM_CTLCOLORSTATIC = 312;
        public const int WM_CUT = 768;
        public const int WM_DEADCHAR = 259;
        public const int WM_DELETEITEM = 45;
        public const int WM_DESTROY = 2;
        public const int WM_DESTROYCLIPBOARD = 775;
        public const int WM_DEVICECHANGE = 537;
        public const int WM_DEVMODECHANGE = 27;
        public const int WM_DISPLAYCHANGE = 126;
        public const int WM_DRAWCLIPBOARD = 776;
        public const int WM_DRAWITEM = 43;
        public const int WM_DROPFILES = 563;
        public const int WM_ENABLE = 10;
        public const int WM_ENDSESSION = 22;
        public const int WM_ENTERIDLE = 289;
        public const int WM_ENTERMENULOOP = 529;
        public const int WM_ENTERSIZEMOVE = 561;
        public const int WM_ERASEBKGND = 20;
        public const int WM_EXITMENULOOP = 530;
        public const int WM_EXITSIZEMOVE = 562;
        public const int WM_FONTCHANGE = 29;
        public const int WM_GETDLGCODE = 135;
        public const int WM_GETFONT = 49;
        public const int WM_GETHOTKEY = 51;
        public const int WM_GETICON = 127;
        public const int WM_GETMINMAXINFO = 36;
        public const int WM_GETOBJECT = 61;
        public const int WM_GETTEXT = 13;
        public const int WM_GETTEXTLENGTH = 14;
        public const int WM_HANDHELDFIRST = 856;
        public const int WM_HANDHELDLAST = 863;
        public const int WM_HELP = 83;
        public const int WM_HOTKEY = 786;
        public const int WM_HSCROLL = 276;
        public const int WM_HSCROLLCLIPBOARD = 782;
        public const int WM_ICONERASEBKGND = 39;
        public const int WM_IME_CHAR = 646;
        public const int WM_IME_COMPOSITION = 271;
        public const int WM_IME_COMPOSITIONFULL = 644;
        public const int WM_IME_CONTROL = 643;
        public const int WM_IME_ENDCOMPOSITION = 270;
        public const int WM_IME_KEYDOWN = 656;
        public const int WM_IME_KEYLAST = 271;
        public const int WM_IME_KEYUP = 657;
        public const int WM_IME_NOTIFY = 642;
        public const int WM_IME_SELECT = 645;
        public const int WM_IME_SETCONTEXT = 641;
        public const int WM_IME_STARTCOMPOSITION = 269;
        public const int WM_INITDIALOG = 272;
        public const int WM_INITMENU = 278;
        public const int WM_INITMENUPOPUP = 279;
        public const int WM_INPUTLANGCHANGE = 81;
        public const int WM_INPUTLANGCHANGEREQUEST = 80;
        public const int WM_KEYDOWN = 256;
        public const int WM_KEYFIRST = 256;
        public const int WM_KEYLAST = 264;
        public const int WM_KEYUP = 257;
        public const int WM_KILLFOCUS = 8;
        public const int WM_LBUTTONDBLCLK = 515;
        public const int WM_LBUTTONDOWN = 513;
        public const int WM_LBUTTONUP = 514;
        public const int WM_MBUTTONDBLCLK = 521;
        public const int WM_MBUTTONDOWN = 519;
        public const int WM_MBUTTONUP = 520;
        public const int WM_MDIACTIVATE = 546;
        public const int WM_MDICASCADE = 551;
        public const int WM_MDICREATE = 544;
        public const int WM_MDIDESTROY = 545;
        public const int WM_MDIGETACTIVE = 553;
        public const int WM_MDIICONARRANGE = 552;
        public const int WM_MDIMAXIMIZE = 549;
        public const int WM_MDINEXT = 548;
        public const int WM_MDIREFRESHMENU = 564;
        public const int WM_MDIRESTORE = 547;
        public const int WM_MDISETMENU = 560;
        public const int WM_MDITILE = 550;
        public const int WM_MEASUREITEM = 44;
        public const int WM_MENUCHAR = 288;
        public const int WM_MENUSELECT = 287;
        public const int WM_MOUSEACTIVATE = 33;
        public const int WM_MOUSEFIRST = 512;
        public const int WM_MOUSEHOVER = 673;
        public const int WM_MOUSELAST = 522;
        public const int WM_MOUSELEAVE = 675;
        public const int WM_MOUSEMOVE = 512;
        public const int WM_MOUSEWHEEL = 522;
        public const int WM_MOVE = 3;
        public const int WM_MOVING = 534;
        public const int WM_NCACTIVATE = 134;
        public const int WM_NCCALCSIZE = 131;
        public const int WM_NCCREATE = 129;
        public const int WM_NCDESTROY = 130;
        public const int WM_NCHITTEST = 132;
        public const int WM_NCLBUTTONDBLCLK = 163;
        public const int WM_NCLBUTTONDOWN = 161;
        public const int WM_NCLBUTTONUP = 162;
        public const int WM_NCMBUTTONDBLCLK = 169;
        public const int WM_NCMBUTTONDOWN = 167;
        public const int WM_NCMBUTTONUP = 168;
        public const int WM_NCMOUSEMOVE = 160;
        public const int WM_NCPAINT = 133;
        public const int WM_NCRBUTTONDBLCLK = 166;
        public const int WM_NCRBUTTONDOWN = 164;
        public const int WM_NCRBUTTONUP = 165;
        public const int WM_NCXBUTTONDBLCLK = 173;
        public const int WM_NCXBUTTONDOWN = 171;
        public const int WM_NCXBUTTONUP = 172;
        public const int WM_NEXTDLGCTL = 40;
        public const int WM_NEXTMENU = 531;
        public const int WM_NOTIFY = 78;
        public const int WM_NOTIFYFORMAT = 85;
        public const int WM_NULL = 0;
        public const int WM_PAINT = 15;
        public const int WM_PAINTCLIPBOARD = 777;
        public const int WM_PAINTICON = 38;
        public const int WM_PALETTECHANGED = 785;
        public const int WM_PALETTEISCHANGING = 784;
        public const int WM_PARENTNOTIFY = 528;
        public const int WM_PASTE = 770;
        public const int WM_PENWINFIRST = 896;
        public const int WM_PENWINLAST = 911;
        public const int WM_POWER = 72;
        public const int WM_POWERBROADCAST = 536;
        public const int WM_PRINT = 791;
        public const int WM_PRINTCLIENT = 792;
        public const int WM_QUERYDRAGICON = 55;
        public const int WM_QUERYENDSESSION = 17;
        public const int WM_QUERYNEWPALETTE = 783;
        public const int WM_QUERYOPEN = 19;
        public const int WM_QUERYUISTATE = 297;
        public const int WM_QUEUESYNC = 35;
        public const int WM_QUIT = 18;
        public const int WM_RBUTTONDBLCLK = 518;
        public const int WM_RBUTTONDOWN = 516;
        public const int WM_RBUTTONUP = 517;
        public const int WM_REFLECT = 8192;
        public const int WM_RENDERALLFORMATS = 774;
        public const int WM_RENDERFORMAT = 773;
        public const int WM_SETCURSOR = 32;
        public const int WM_SETFOCUS = 7;
        public const int WM_SETFONT = 48;
        public const int WM_SETHOTKEY = 50;
        public const int WM_SETICON = 128;
        public const int WM_SETREDRAW = 11;
        public const int WM_SETTEXT = 12;
        public const int WM_SETTINGCHANGE = 26;
        public const int WM_SHOWWINDOW = 24;
        public const int WM_SIZE = 5;
        public const int WM_SIZECLIPBOARD = 779;
        public const int WM_SIZING = 532;
        public const int WM_SPOOLERSTATUS = 42;
        public const int WM_STYLECHANGED = 125;
        public const int WM_STYLECHANGING = 124;
        public const int WM_SYSCHAR = 262;
        public const int WM_SYSCOLORCHANGE = 21;
        public const int WM_SYSCOMMAND = 274;
        public const int WM_SYSDEADCHAR = 263;
        public const int WM_SYSKEYDOWN = 260;
        public const int WM_SYSKEYUP = 261;
        public const int WM_TASKBAR_CREATED = 49286;
        public const int WM_TCARD = 82;
        public const int WM_TIMECHANGE = 30;
        public const int WM_TIMER = 275;
        public const int WM_TRAYMOUSEMESSAGE = 2048;
        public const int WM_UNDO = 772;
        public const int WM_UNINITMENUPOPUP = 293;
        public const int WM_UPDATEUISTATE = 296;
        public const int WM_USER = 1024;
        public const int WM_USERCHANGED = 84;
        public const int WM_VKEYTOITEM = 46;
        public const int WM_VSCROLL = 277;
        public const int WM_VSCROLLCLIPBOARD = 778;
        public const int WM_WINDOWPOSCHANGED = 71;
        public const int WM_WINDOWPOSCHANGING = 70;
        public const int WM_WININICHANGE = 26;
        public const int WM_XBUTTONDBLCLK = 525;
        public const int WM_XBUTTONDOWN = 523;
        public const int WM_XBUTTONUP = 524;
        public const int WPF_SETMINPOSITION = 1;
        public const int WSF_VISIBLE = 1;
        public const int WS_BORDER = 8388608;
        public const int WS_CAPTION = 12582912;
        public const int WS_CHILD = 1073741824;
        public const int WS_CLIPCHILDREN = 33554432;
        public const int WS_CLIPSIBLINGS = 67108864;
        public const int WS_DISABLED = 134217728;
        public const int WS_DLGFRAME = 4194304;
        public const int WS_EX_APPWINDOW = 262144;
        public const int WS_EX_CLIENTEDGE = 512;
        public const int WS_EX_CONTEXTHELP = 1024;
        public const int WS_EX_CONTROLPARENT = 65536;
        public const int WS_EX_DLGMODALFRAME = 1;
        public const int WS_EX_LAYERED = 524288;
        public const int WS_EX_LAYOUTRTL = 4194304;
        public const int WS_EX_LEFT = 0;
        public const int WS_EX_LEFTSCROLLBAR = 16384;
        public const int WS_EX_MDICHILD = 64;
        public const int WS_EX_NOINHERITLAYOUT = 1048576;
        public const int WS_EX_RIGHT = 4096;
        public const int WS_EX_RTLREADING = 8192;
        public const int WS_EX_STATICEDGE = 131072;
        public const int WS_EX_TOOLWINDOW = 128;
        public const int WS_EX_TOPMOST = 8;
        public const int WS_HSCROLL = 1048576;
        public const int WS_MAXIMIZE = 16777216;
        public const int WS_MAXIMIZEBOX = 65536;
        public const int WS_MINIMIZE = 536870912;
        public const int WS_MINIMIZEBOX = 131072;
        public const int WS_OVERLAPPED = 0;
        public const int WS_POPUP = -2147483648;
        public const int WS_SYSMENU = 524288;
        public const int WS_TABSTOP = 65536;
        public const int WS_THICKFRAME = 262144;
        public const int WS_VISIBLE = 268435456;
        public const int WS_VSCROLL = 2097152;
        public const int cmb4 = 1139;
        public const int stc4 = 1091;
    }
    public static class NativeMethods
    {
        public static System.IntPtr GetWindowLong(System.IntPtr hWnd, Radical.Win32.WindowLong index) { }
        public static System.IntPtr SetWindowLong(System.IntPtr hWnd, Radical.Win32.WindowLong index, System.IntPtr value) { }
    }
    public enum WindowLong
    {
        WindowProc = -4,
        HInstance = -6,
        HWndParent = -8,
        Style = -16,
        ExStyle = -20,
        UserData = -21,
        ID = -12,
    }
}
namespace Radical.Windows.Analytics
{
    public class CommandEvent : Radical.Analytics.AnalyticsEvent
    {
        public CommandEvent() { }
    }
}
namespace Radical.Windows.Behaviors
{
    public sealed class AutoComplete : System.Windows.ResourceDictionary, System.Windows.Markup.IComponentConnector
    {
        public static readonly System.Windows.DependencyProperty ChoosenItemProperty;
        public static readonly System.Windows.DependencyProperty FilterPathProperty;
        public static readonly System.Windows.DependencyProperty ImplicitItemsFilterProperty;
        public static readonly System.Windows.DependencyProperty SourceProperty;
        public static readonly System.Windows.DependencyProperty UserTextProperty;
        public AutoComplete(System.Windows.Controls.Control value) { }
        public void InitializeComponent() { }
        public static object GetChoosenItem(System.Windows.DependencyObject d) { }
        public static Radical.Windows.Behaviors.AutoCompleteFilterPathCollection GetFilterPath(System.Windows.DependencyObject d) { }
        public static Radical.Windows.Behaviors.ImplicitItemsFilter GetImplicitItemsFilter(System.Windows.DependencyObject owner) { }
        public static System.Windows.DataTemplate GetItemTemplate(System.Windows.DependencyObject d) { }
        public static object GetSource(System.Windows.DependencyObject d) { }
        public static object GetUserText(System.Windows.DependencyObject d) { }
        public static void SetChoosenItem(System.Windows.DependencyObject d, object value) { }
        public static void SetFilterPath(System.Windows.DependencyObject d, Radical.Windows.Behaviors.AutoCompleteFilterPathCollection value) { }
        public static void SetImplicitItemsFilter(System.Windows.DependencyObject owner, Radical.Windows.Behaviors.ImplicitItemsFilter value) { }
        public static void SetItemTemplate(System.Windows.DependencyObject d, object value) { }
        public static void SetSource(System.Windows.DependencyObject d, object value) { }
        public static void SetUserText(System.Windows.DependencyObject d, object value) { }
        public interface ICanRepresentMyself
        {
            string AsString();
        }
        public interface IHaveAnOpinionOnFilter
        {
            bool Match(string userText);
        }
    }
    [System.ComponentModel.TypeConverter(typeof(Radical.Windows.Behaviors.AutoCompleteFilterPathCollectionTypeConverter))]
    public class AutoCompleteFilterPathCollection : System.Collections.ObjectModel.Collection<string>
    {
        public AutoCompleteFilterPathCollection() { }
        public AutoCompleteFilterPathCollection(System.Collections.Generic.IList<string> list) { }
    }
    public enum BusyStatus
    {
        Idle = 0,
        Busy = 1,
    }
    public static class BusyStatusManager
    {
        public static readonly System.Windows.DependencyProperty ContentProperty;
        public static readonly System.Windows.DependencyProperty EnableMultiThreadingHostProperty;
        public static readonly System.Windows.DependencyProperty StatusProperty;
        public static object GetContent(System.Windows.UIElement control) { }
        public static bool GetEnableMultiThreadingHost(System.Windows.DependencyObject owner) { }
        public static Radical.Windows.Behaviors.BusyStatus GetStatus(System.Windows.UIElement control) { }
        public static void SetContent(System.Windows.UIElement control, object value) { }
        public static void SetEnableMultiThreadingHost(System.Windows.DependencyObject owner, bool value) { }
        public static void SetStatus(System.Windows.UIElement control, Radical.Windows.Behaviors.BusyStatus value) { }
    }
    public static class CueBannerService
    {
        public static readonly System.Windows.DependencyProperty CueBannerProperty;
        public static readonly System.Windows.DependencyProperty PasswordCueBannerProperty;
        public static object GetCueBanner(System.Windows.Controls.Primitives.TextBoxBase control) { }
        public static object GetPasswordCueBanner(System.Windows.Controls.PasswordBox owner) { }
        public static void SetCueBanner(System.Windows.Controls.Primitives.TextBoxBase control, object value) { }
        public static void SetPasswordCueBanner(System.Windows.Controls.PasswordBox owner, object value) { }
    }
    public class DataGridBehavior
    {
        public static readonly System.Windows.DependencyProperty LastColumnFillProperty;
        public DataGridBehavior() { }
        public static bool GetLastColumnFill(System.Windows.Controls.DataGrid element) { }
        public static void SetLastColumnFill(System.Windows.Controls.DataGrid element, bool value) { }
    }
    public static class DesignTimeHelper
    {
        public static bool GetIsInDesignMode() { }
    }
    public class DisableManipulationBoundaryFeedback : Microsoft.Xaml.Behaviors.Behavior<System.Windows.Controls.ListBox>
    {
        public DisableManipulationBoundaryFeedback() { }
        protected override void OnAttached() { }
        protected override void OnDetaching() { }
    }
    public sealed class DisableUndoManagerBehavior : Microsoft.Xaml.Behaviors.Behavior<System.Windows.Controls.TextBox>
    {
        public DisableUndoManagerBehavior() { }
        protected override void OnAttached() { }
    }
    public static class DragDropManager
    {
        public static readonly System.Windows.DependencyProperty DataObjectProperty;
        public static readonly System.Windows.DependencyProperty DataObjectTypeProperty;
        public static readonly System.Windows.DependencyProperty DropTargetProperty;
        public static readonly System.Windows.DependencyProperty IsDragSourceAttachedProperty;
        public static readonly System.Windows.DependencyProperty IsDraggingProperty;
        public static readonly System.Windows.DependencyProperty IsDropTargetAttachedProperty;
        public static readonly System.Windows.DependencyProperty OnDragEnterCommandProperty;
        public static readonly System.Windows.DependencyProperty OnDragLeaveCommandProperty;
        public static readonly System.Windows.DependencyProperty OnDropCommandProperty;
        public static readonly System.Windows.DependencyProperty StartPointProperty;
        public static object GetDataObject(System.Windows.DependencyObject owner) { }
        public static string GetDataObjectType(System.Windows.DependencyObject owner) { }
        public static object GetDropTarget(System.Windows.DependencyObject owner) { }
        public static bool GetIsDragging(System.Windows.DependencyObject owner) { }
        public static System.Windows.Input.ICommand GetOnDragEnterCommand(System.Windows.DependencyObject owner) { }
        public static System.Windows.Input.ICommand GetOnDragLeaveCommand(System.Windows.DependencyObject owner) { }
        public static System.Windows.Input.ICommand GetOnDropCommand(System.Windows.DependencyObject owner) { }
        public static void SetDataObject(System.Windows.DependencyObject owner, object value) { }
        public static void SetDataObjectType(System.Windows.DependencyObject owner, string value) { }
        public static void SetDropTarget(System.Windows.DependencyObject owner, object value) { }
        public static void SetOnDragEnterCommand(System.Windows.DependencyObject owner, System.Windows.Input.ICommand value) { }
        public static void SetOnDragLeaveCommand(System.Windows.DependencyObject owner, System.Windows.Input.ICommand value) { }
        public static void SetOnDropCommand(System.Windows.DependencyObject owner, System.Windows.Input.ICommand value) { }
    }
    public abstract class DragDropOperationArgs : System.EventArgs
    {
        protected DragDropOperationArgs(System.Windows.IDataObject data, System.Windows.DragDropKeyStates keyStates, object dropTarget) { }
        public System.Windows.IDataObject Data { get; }
        public object DropTarget { get; }
        public System.Windows.DragDropKeyStates KeyStates { get; }
    }
    public class DragEnterArgs : Radical.Windows.Behaviors.DragDropOperationArgs
    {
        public DragEnterArgs(System.Windows.IDataObject data, System.Windows.DragDropKeyStates keyStates, object dropTarget, System.Windows.DragDropEffects allowedEffects) { }
        public System.Windows.DragDropEffects AllowedEffects { get; }
    }
    public class DragLeaveArgs : Radical.Windows.Behaviors.DragDropOperationArgs
    {
        public DragLeaveArgs(System.Windows.IDataObject data, System.Windows.DragDropKeyStates keyStates, object dropTarget, System.Windows.DragDropEffects allowedEffects) { }
        public System.Windows.DragDropEffects AllowedEffects { get; }
    }
    public class DragOverArgs : Radical.Windows.Behaviors.DragDropOperationArgs
    {
        public DragOverArgs(System.Windows.IDataObject data, System.Windows.DragDropKeyStates keyStates, object dropTarget, System.Windows.DragDropEffects allowedEffects, System.Windows.Point position) { }
        public System.Windows.DragDropEffects AllowedEffects { get; }
        public System.Windows.DragDropEffects Effects { get; set; }
        public System.Windows.Point Position { get; }
    }
    public class DropArgs : Radical.Windows.Behaviors.DragDropOperationArgs
    {
        public DropArgs(System.Windows.IDataObject data, System.Windows.DragDropKeyStates keyStates, object dropTarget, System.Windows.Point position) { }
        public System.Windows.Point Position { get; }
    }
    public static class EmptyPlaceHolderService
    {
        public static readonly System.Windows.DependencyProperty ContentProperty;
        public static object GetContent(System.Windows.Controls.ItemsControl owner) { }
        public static void SetContent(System.Windows.Controls.ItemsControl owner, object value) { }
    }
    public static class GridViewColumnManager
    {
        public static readonly System.Windows.DependencyProperty FillProperty;
        public static readonly System.Windows.DependencyProperty SortPropertyProperty;
        public static bool GetFill(System.Windows.Controls.GridViewColumn owner) { }
        public static string GetSortProperty(System.Windows.Controls.GridViewColumn owner) { }
        public static void SetFill(System.Windows.Controls.GridViewColumn owner, bool value) { }
        public static void SetSortProperty(System.Windows.Controls.GridViewColumn owner, string value) { }
    }
    public class Handle : Radical.Windows.Behaviors.RadicalBehavior<System.Windows.FrameworkElement>
    {
        public static readonly System.Windows.DependencyProperty PassingInProperty;
        public static readonly System.Windows.DependencyProperty RoutedEventProperty;
        public static readonly System.Windows.DependencyProperty WithCommandProperty;
        public Handle() { }
        public string PassingIn { get; set; }
        public System.Windows.RoutedEvent RoutedEvent { get; set; }
        public System.Windows.Input.ICommand WithCommand { get; set; }
        protected override void OnAttached() { }
        protected override void OnDetaching() { }
    }
    public interface INotifyAttachedOjectLoaded
    {
        event System.EventHandler AttachedObjectLoaded;
        T GetAttachedObject<T>()
            where T : System.Windows.FrameworkElement;
    }
    public enum ImplicitItemsFilter
    {
        Enabled = 0,
        Disabled = 1,
    }
    public class ListViewColumnHeaderCommandBehavior : Radical.Windows.Behaviors.RadicalBehavior<System.Windows.Controls.ListView>, System.Windows.Input.ICommandSource
    {
        public static readonly System.Windows.DependencyProperty CommandProperty;
        public ListViewColumnHeaderCommandBehavior() { }
        public System.Windows.Input.ICommand Command { get; set; }
        public object CommandParameter { get; set; }
        public System.Windows.IInputElement CommandTarget { get; }
        protected override void OnAttached() { }
        protected override void OnDetaching() { }
    }
    public static class ListViewManager
    {
        public static readonly System.Windows.DependencyProperty AutoSizeColumnsProperty;
        public static System.Windows.DependencyProperty ItemDoubleClickCommandProperty;
        public static readonly System.Windows.DependencyProperty ItemRemoveCommandProperty;
        public static readonly System.Windows.DependencyProperty SelectedItemsProperty;
        public static readonly System.Windows.DependencyProperty SortCommandProperty;
        public static bool GetAutoSizeColumns(System.Windows.Controls.ListView owner) { }
        public static System.Windows.Input.ICommand GetItemRemoveCommand(System.Windows.DependencyObject owner) { }
        public static System.Collections.IList GetSelectedItems(System.Windows.Controls.ListView owner) { }
        public static System.Windows.Input.ICommand GetSortCommand(System.Windows.Controls.ListView owner) { }
        public static void SetAutoSizeColumns(System.Windows.Controls.ListView owner, bool value) { }
        public static void SetItemDoubleClickCommand(System.Windows.DependencyObject target, System.Windows.Input.ICommand value) { }
        public static void SetItemRemoveCommand(System.Windows.DependencyObject owner, System.Windows.Input.ICommand value) { }
        public static void SetSelectedItems(System.Windows.Controls.ListView owner, System.Collections.IList value) { }
        public static void SetSortCommand(System.Windows.Controls.ListView owner, System.Windows.Input.ICommand value) { }
    }
    public class MouseManager
    {
        public static readonly System.Windows.DependencyProperty OnContextMenuOpeningProperty;
        public static readonly System.Windows.DependencyProperty OnMouseDoubleClickProperty;
        public static readonly System.Windows.DependencyProperty OnMouseLeftButtonDownProperty;
        public static readonly System.Windows.DependencyProperty OnMouseRightButtonDownProperty;
        public MouseManager() { }
        public static System.Windows.Point GetOnContextMenuOpening(System.Windows.DependencyObject owner) { }
        public static System.Windows.Point GetOnMouseDoubleClick(System.Windows.DependencyObject owner) { }
        public static System.Windows.Point GetOnMouseLeftButtonDown(System.Windows.DependencyObject owner) { }
        public static System.Windows.Point GetOnMouseRightButtonDown(System.Windows.DependencyObject owner) { }
        public static void SetOnContextMenuOpening(System.Windows.DependencyObject owner, System.Windows.Point point) { }
        public static void SetOnMouseDoubleClick(System.Windows.DependencyObject owner, System.Windows.Point point) { }
        public static void SetOnMouseLeftButtonDown(System.Windows.DependencyObject owner, System.Windows.Point point) { }
        public static void SetOnMouseRightButtonDown(System.Windows.DependencyObject owner, System.Windows.Point point) { }
    }
    public static class Overlay
    {
        public static readonly System.Windows.DependencyProperty ContentProperty;
        public static object GetContent(System.Windows.UIElement control) { }
        public static void SetContent(System.Windows.UIElement control, object value) { }
    }
    public class OverlayBehavior : Radical.Windows.Behaviors.RadicalBehavior<System.Windows.FrameworkElement>
    {
        public static readonly System.Windows.DependencyProperty BackgroundProperty;
        public static readonly System.Windows.DependencyProperty ContentProperty;
        public static readonly System.Windows.DependencyProperty DisableAdornedElementProperty;
        public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;
        public static readonly System.Windows.DependencyProperty IsVisibleProperty;
        public OverlayBehavior() { }
        public System.Windows.Media.Brush Background { get; set; }
        public object Content { get; set; }
        public bool DisableAdornedElement { get; set; }
        public bool IsHitTestVisible { get; set; }
        public bool IsVisible { get; set; }
        protected override void OnAttached() { }
        protected override void OnDetaching() { }
    }
    public static class Password
    {
        public static readonly System.Windows.DependencyProperty CommandParameterProperty;
        public static readonly System.Windows.DependencyProperty CommandProperty;
        public static readonly System.Windows.DependencyProperty TextProperty;
        public static System.Windows.Input.ICommand GetCommand(System.Windows.Controls.PasswordBox owner) { }
        public static object GetCommandParameter(System.Windows.Controls.PasswordBox owner) { }
        public static string GetText(System.Windows.Controls.PasswordBox passwordBox) { }
        public static void SetCommand(System.Windows.Controls.PasswordBox owner, System.Windows.Input.ICommand value) { }
        public static void SetCommandParameter(System.Windows.Controls.PasswordBox owner, object value) { }
        public static void SetText(System.Windows.Controls.PasswordBox passwordBox, string value) { }
    }
    public class PasswordBoxBehavior : Radical.Windows.Behaviors.RadicalBehavior<System.Windows.Controls.PasswordBox>, System.Windows.Input.ICommandSource
    {
        public static readonly System.Windows.DependencyProperty CommandProperty;
        public static readonly System.Windows.DependencyProperty TextProperty;
        public PasswordBoxBehavior() { }
        public System.Windows.Input.ICommand Command { get; set; }
        public object CommandParameter { get; set; }
        public System.Windows.IInputElement CommandTarget { get; }
        public string Text { get; set; }
        protected override void OnAttached() { }
        protected override void OnDetaching() { }
    }
    public class PasswordBoxCommandArgs : System.EventArgs
    {
        public PasswordBoxCommandArgs(System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers, object commandParameter) { }
        public object CommandParameter { get; }
        public System.Windows.Input.Key Key { get; }
        public System.Windows.Input.ModifierKeys Modifiers { get; }
    }
    public abstract class RadicalBehavior<T> : Microsoft.Xaml.Behaviors.Behavior<T>, Radical.Windows.Behaviors.INotifyAttachedOjectLoaded, System.Windows.IWeakEventListener
        where T : System.Windows.FrameworkElement
    {
        public RadicalBehavior() { }
        public event System.EventHandler AttachedObjectLoaded;
        public T GetAttachedObject<T>()
            where T : System.Windows.FrameworkElement { }
        protected override void OnAttached() { }
        protected virtual void OnAttachedObjectLoaded() { }
        protected override void OnDetaching() { }
        protected virtual bool OnReceiveWeakEvent(System.Type managerType, object sender, System.EventArgs e) { }
    }
    public class ScrollIntoViewForDataGrid : Radical.Windows.Behaviors.RadicalBehavior<System.Windows.Controls.DataGrid>
    {
        public ScrollIntoViewForDataGrid() { }
        protected override void OnAttached() { }
        protected override void OnDetaching() { }
    }
    public class ScrollIntoViewForListBox : Radical.Windows.Behaviors.RadicalBehavior<System.Windows.Controls.ListBox>
    {
        public ScrollIntoViewForListBox() { }
        protected override void OnAttached() { }
        protected override void OnDetaching() { }
    }
    public class ScrollIntoViewForListView : Radical.Windows.Behaviors.RadicalBehavior<System.Windows.Controls.ListView>
    {
        public ScrollIntoViewForListView() { }
        protected override void OnAttached() { }
        protected override void OnDetaching() { }
    }
    public class ScrollViewerManager
    {
        public static readonly System.Windows.DependencyProperty HorizontalOffsetProperty;
        public static readonly System.Windows.DependencyProperty VerticalOffsetProperty;
        public ScrollViewerManager() { }
        public static double GetHorizontalOffset(System.Windows.DependencyObject owner) { }
        public static double GetVerticalOffset(System.Windows.DependencyObject owner) { }
        public static void SetHorizontalOffset(System.Windows.DependencyObject owner, double value) { }
        public static void SetVerticalOffset(System.Windows.DependencyObject owner, double value) { }
    }
    public class TextBoxCommandArgs : System.EventArgs
    {
        public TextBoxCommandArgs(System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers, object commandParameter) { }
        public object CommandParameter { get; }
        public System.Windows.Input.Key Key { get; }
        public System.Windows.Input.ModifierKeys Modifiers { get; }
    }
    public class TextBoxCommandBehavior : Radical.Windows.Behaviors.RadicalBehavior<System.Windows.Controls.TextBox>, System.Windows.Input.ICommandSource
    {
        public static readonly System.Windows.DependencyProperty CommandProperty;
        public TextBoxCommandBehavior() { }
        public System.Windows.Input.ICommand Command { get; set; }
        public object CommandParameter { get; set; }
        public System.Windows.IInputElement CommandTarget { get; }
        protected override void OnAttached() { }
        protected override void OnDetaching() { }
    }
    public static class TextBoxManager
    {
        public static readonly System.Windows.DependencyProperty AutoSelectTextProperty;
        public static readonly System.Windows.DependencyProperty CommandParameterProperty;
        public static readonly System.Windows.DependencyProperty CommandProperty;
        public static bool GetAutoSelectText(System.Windows.Controls.TextBox owner) { }
        public static System.Windows.Input.ICommand GetCommand(System.Windows.DependencyObject owner) { }
        public static object GetCommandParameter(System.Windows.DependencyObject owner) { }
        public static void SetAutoSelectText(System.Windows.Controls.TextBox owner, bool value) { }
        public static void SetCommand(System.Windows.DependencyObject owner, System.Windows.Input.ICommand value) { }
        public static void SetCommandParameter(System.Windows.DependencyObject owner, object value) { }
    }
    public sealed class WindowControlBoxBehavior : Microsoft.Xaml.Behaviors.Behavior<System.Windows.Window>
    {
        public WindowControlBoxBehavior() { }
        public bool AllowMaximize { get; set; }
        public bool AllowMinimize { get; set; }
        public bool ShowIcon { get; set; }
        protected override void OnAttached() { }
        protected override void OnDetaching() { }
    }
}
namespace Radical.Windows.CommandBuilders
{
    public class BooleanFact
    {
        public BooleanFact() { }
        public System.Func<bool> FastGetter { get; set; }
        public string Name { get; set; }
    }
    public class CommandData
    {
        public CommandData() { }
        public Radical.Windows.CommandBuilders.BooleanFact BooleanFact { get; set; }
        public object DataContext { get; set; }
        public Radical.ComponentModel.Windows.Input.CommandDescriptionAttribute Description { get; set; }
        public Radical.Reflection.LateBoundVoidMethod FastDelegate { get; set; }
        public bool HasParameter { get; set; }
        public Radical.ComponentModel.Windows.Input.KeyBindingAttribute[] KeyBindings { get; set; }
        public string MethodName { get; set; }
        public Radical.ComponentModel.IMonitor Monitor { get; set; }
        public System.Type ParameterType { get; set; }
    }
    public class DelegateCommandBuilder
    {
        public DelegateCommandBuilder() { }
        public virtual bool CanCreateCommand(System.Windows.PropertyPath path, System.Windows.DependencyObject target) { }
        public virtual Radical.ComponentModel.Windows.Input.IDelegateCommand CreateCommand(Radical.Windows.CommandBuilders.CommandData commandData) { }
        public virtual object GetDataContext(System.Windows.DependencyObject target) { }
        public virtual bool TryGenerateCommandData(System.Windows.PropertyPath path, object dataContext, out Radical.Windows.CommandBuilders.CommandData data) { }
    }
}
namespace Radical.Windows.ComponentModel
{
    public class ActiveContentChangedEventArgs : System.EventArgs
    {
        public ActiveContentChangedEventArgs(System.Windows.DependencyObject activeContent, System.Windows.DependencyObject previousActiveContent) { }
        public System.Windows.DependencyObject ActiveContent { get; }
        public bool HasActiveContent { get; }
        public System.Windows.DependencyObject PreviousActiveContent { get; }
    }
    public interface IContentRegion : Radical.Windows.ComponentModel.IRegion
    {
        System.Windows.DependencyObject Content { get; set; }
    }
    public interface IConventionsHandler
    {
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Action<System.Windows.DependencyObject> AttachViewBehaviors { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Action<System.Windows.DependencyObject, object> AttachViewToViewModel { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Action<System.Windows.DependencyObject> DefaultAttachViewBehaviors { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Action<System.Windows.DependencyObject, object> DefaultAttachViewToViewModel { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Action<System.Windows.DependencyObject> DefaultDetachViewBehaviors { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Action<System.Windows.DependencyObject, object> DefaultExposeViewModelAsStaticResource { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<object, System.Windows.Window> DefaultFindHostingWindowOf { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Windows.DependencyObject, System.Windows.Window> DefaultFindWindowOf { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Type, object> DefaultGenerateServiceStaticResourceKey { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<object, string> DefaultGenerateViewModelStaticResourceKey { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Windows.DependencyObject, Radical.Windows.ComponentModel.ViewDataContextSearchBehavior, object> DefaultGetViewDataContext { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<object, System.Windows.DependencyObject> DefaultGetViewOfViewModel { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Windows.FrameworkElement, bool> DefaultIsHostingView { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Type, System.Type> DefaultResolveViewModelType { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Type, System.Type> DefaultResolveViewType { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Action<System.Windows.DependencyObject, object> DefaultSetViewDataContext { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Windows.DependencyObject, object, bool> DefaultShouldExposeViewModelAsStaticResource { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Windows.DependencyObject, bool> DefaultShouldNotifyViewLoaded { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Windows.DependencyObject, object, bool> DefaultShouldNotifyViewModelLoaded { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Windows.DependencyObject, bool> DefaultShouldReleaseView { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Windows.DependencyObject, bool> DefaultShouldUnregisterRegionManagerOfView { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Windows.DependencyObject, bool> DefaultShouldUnsubscribeViewModelOnRelease { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Windows.DependencyObject, System.Action<System.Windows.DependencyObject>, System.Windows.DependencyObject> DefaultTryHookClosedEventOfHostOf { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        Radical.Windows.ComponentModel.ViewDataContextSearchBehavior DefaultViewDataContextSearchBehavior { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Windows.DependencyObject, Radical.Windows.ComponentModel.ViewDataContextSearchBehavior, bool> DefaultViewHasDataContext { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Action<System.Windows.DependencyObject, Radical.Windows.ComponentModel.ViewReleaseBehavior> DefaultViewReleaseHandler { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Action<System.Windows.DependencyObject> DetachViewBehaviors { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Action<System.Windows.DependencyObject, object> ExposeViewModelAsStaticResource { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<object, System.Windows.Window> FindHostingWindowOf { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Windows.DependencyObject, System.Windows.Window> FindWindowOf { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Type, object> GenerateServiceStaticResourceKey { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<object, string> GenerateViewModelStaticResourceKey { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Windows.DependencyObject, Radical.Windows.ComponentModel.ViewDataContextSearchBehavior, object> GetViewDataContext { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<object, System.Windows.DependencyObject> GetViewOfViewModel { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Windows.FrameworkElement, bool> IsHostingView { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Type, System.Type> ResolveViewModelType { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Type, System.Type> ResolveViewType { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Action<System.Windows.DependencyObject, object> SetViewDataContext { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Windows.DependencyObject, object, bool> ShouldExposeViewModelAsStaticResource { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Windows.DependencyObject, bool> ShouldNotifyViewLoaded { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Windows.DependencyObject, object, bool> ShouldNotifyViewModelLoaded { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Windows.DependencyObject, bool> ShouldReleaseView { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Windows.DependencyObject, bool> ShouldUnregisterRegionManagerOfView { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Windows.DependencyObject, bool> ShouldUnsubscribeViewModelOnRelease { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Windows.DependencyObject, System.Action<System.Windows.DependencyObject>, System.Windows.DependencyObject> TryHookClosedEventOfHostOf { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Func<System.Windows.DependencyObject, Radical.Windows.ComponentModel.ViewDataContextSearchBehavior, bool> ViewHasDataContext { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Action<System.Windows.DependencyObject, Radical.Windows.ComponentModel.ViewReleaseBehavior> ViewReleaseHandler { get; set; }
    }
    public interface IElementsRegion : Radical.Windows.ComponentModel.IRegion
    {
        void Add(System.Windows.DependencyObject view);
        System.Collections.Generic.IEnumerable<TView> GetElements<TView>()
            where TView : System.Windows.DependencyObject;
        void Remove(System.Windows.DependencyObject view);
    }
    public interface IExpectViewActivatedCallback
    {
        void OnViewActivated();
    }
    public interface IExpectViewClosedCallback
    {
        void OnViewClosed();
    }
    public interface IExpectViewClosingCallback
    {
        void OnViewClosing(System.ComponentModel.CancelEventArgs e);
    }
    public interface IExpectViewLoadedCallback
    {
        void OnViewLoaded();
    }
    public interface IExpectViewShownCallback
    {
        void OnViewShown();
    }
    public interface IRegion
    {
        int AsyncLoadDelay { get; set; }
        System.Windows.DependencyObject HostingView { get; }
        string Name { get; }
        void Shutdown();
    }
    public interface IRegionInjectionHandler
    {
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        System.Action<System.Func<System.Windows.DependencyObject>, Radical.Windows.ComponentModel.IRegion> Inject { get; set; }
        System.Collections.Generic.IEnumerable<System.Type> GetViewsInterestedIn(string regionName);
        void RegisterViewAsInterestedIn(string regionName, System.Type viewType);
        void RegisterViewsAsInterestedIn(string regionName, System.Collections.Generic.IEnumerable<System.Type> views);
    }
    public interface IRegionManager
    {
        Radical.Windows.ComponentModel.IRegion this[string name] { get; }
        System.Collections.Generic.IEnumerable<Radical.Windows.ComponentModel.IRegion> GetAllRegisteredRegions();
        Radical.Windows.ComponentModel.IRegion GetRegion(string name);
        TRegion GetRegion<TRegion>(string name)
            where TRegion : Radical.Windows.ComponentModel.IRegion;
        void RegisterRegion(Radical.Windows.ComponentModel.IRegion region);
        void Shutdown();
        bool TryGetRegion(string regionName, out Radical.Windows.ComponentModel.IRegion region);
        bool TryGetRegion<TRegion>(string regionName, out TRegion region)
            where TRegion : Radical.Windows.ComponentModel.IRegion;
    }
    public interface IRegionManagerFactory
    {
        Radical.Windows.ComponentModel.IRegionManager Create();
    }
    public interface IRegionService
    {
        Radical.Windows.ComponentModel.IRegionManager FindRegionManager(System.Func<System.Windows.DependencyObject, Radical.Windows.ComponentModel.IRegionManager, bool> filter);
        Radical.Windows.ComponentModel.IRegionManager GetKnownRegionManager<TView>()
            where TView : System.Windows.DependencyObject;
        Radical.Windows.ComponentModel.IRegionManager GetRegionManager(System.Windows.DependencyObject owner);
        bool HoldsRegionManager(System.Windows.DependencyObject owner);
        Radical.Windows.ComponentModel.IRegionManager RegisterRegionManager(System.Windows.DependencyObject owner);
        void UnregisterRegionManager(System.Windows.DependencyObject owner);
        void UnregisterRegionManager(System.Windows.DependencyObject owner, Radical.Windows.ComponentModel.UnregisterBehavior behavior);
    }
    public interface IReleaseComponents
    {
        void Release(object component);
    }
    public interface IRequireValidation : System.ComponentModel.INotifyDataErrorInfo
    {
        bool IsValid { get; }
        System.Collections.ObjectModel.ObservableCollection<Radical.Validation.ValidationError> ValidationErrors { get; }
        event System.EventHandler Validated;
        void ResetValidation();
        void TriggerValidation();
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "IsValid",
                "Errors"})]
        System.ValueTuple<bool, System.Collections.Generic.IEnumerable<Radical.Validation.ValidationError>> Validate();
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "IsValid",
                "Errors"})]
        System.ValueTuple<bool, System.Collections.Generic.IEnumerable<Radical.Validation.ValidationError>> Validate(Radical.Windows.ComponentModel.ValidationBehavior behavior);
    }
    public interface ISwitchingElementsRegion : Radical.Windows.ComponentModel.IElementsRegion, Radical.Windows.ComponentModel.IRegion
    {
        System.Windows.DependencyObject ActiveContent { get; }
        System.Windows.DependencyObject PreviousActiveContent { get; }
        event System.EventHandler<Radical.Windows.ComponentModel.ActiveContentChangedEventArgs> ActiveContentChanged;
        void Activate(System.Windows.DependencyObject content);
    }
    public interface IValidationService
    {
        bool IsValidationSuspended { get; }
        bool MergeValidationErrors { get; set; }
        void ResumeValidation();
        System.IDisposable SuspendValidation();
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "IsValid",
                "Errors"})]
        System.ValueTuple<bool, System.Collections.Generic.IEnumerable<Radical.Validation.ValidationError>> Validate();
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "IsValid",
                "Errors"})]
        System.ValueTuple<bool, System.Collections.Generic.IEnumerable<Radical.Validation.ValidationError>> ValidateProperty(string propertyName);
    }
    public interface IViewModel : System.ComponentModel.INotifyPropertyChanged
    {
        System.Windows.DependencyObject View { get; set; }
    }
    public interface IViewResolver
    {
        System.Windows.DependencyObject GetView(System.Type viewType);
        System.Windows.DependencyObject GetView(System.Type viewType, System.Action<object> viewModelInterceptor);
        T GetView<T>()
            where T : System.Windows.DependencyObject;
        T GetView<T>(System.Action<object> viewModelInterceptor)
            where T : System.Windows.DependencyObject;
        TView GetView<TView, TViewModel>(System.Action<TViewModel> viewModelInterceptor)
            where TView : System.Windows.DependencyObject
        ;
    }
    [System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.All)]
    public class IgnorePropertyInjectionAttribue : System.Attribute
    {
        public IgnorePropertyInjectionAttribue() { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.All)]
    public class InjectViewInRegionAttribute : System.Attribute
    {
        public InjectViewInRegionAttribute() { }
        public string Named { get; set; }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.All, AllowMultiple=false, Inherited=false)]
    public class NotifyActivatedAttribute : System.Attribute
    {
        public NotifyActivatedAttribute() { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.All, AllowMultiple=false, Inherited=false)]
    public class NotifyClosedAttribute : System.Attribute
    {
        public NotifyClosedAttribute() { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.All, AllowMultiple=false, Inherited=false)]
    public class NotifyLoadedAttribute : System.Attribute
    {
        public NotifyLoadedAttribute() { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.All, AllowMultiple=false, Inherited=false)]
    public class NotifyShownAttribute : System.Attribute
    {
        public NotifyShownAttribute() { }
    }
    public sealed class SupportComponentDisposeAttribute : System.Attribute
    {
        public SupportComponentDisposeAttribute() { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface | System.AttributeTargets.All)]
    public class ToolkitComponentAttribute : System.Attribute
    {
        public ToolkitComponentAttribute() { }
    }
    public enum UnregisterBehavior
    {
        Default = 0,
        WholeLogicalTreeChain = 1,
    }
    public enum ValidationBehavior
    {
        TriggerValidationErrorsOnFailure = 0,
        RunSilentValidation = 1,
    }
    public enum ViewDataContextSearchBehavior
    {
        LocalOnly = 0,
        Legacy = 1,
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.All)]
    public class ViewManualReleaseAttribute : System.Attribute
    {
        public ViewManualReleaseAttribute() { }
    }
    public enum ViewReleaseBehavior
    {
        Default = 0,
        Force = 1,
    }
}
namespace Radical.Windows.Controls.Automation.Peers
{
    public class ResizerAutomationPeer : System.Windows.Automation.Peers.FrameworkElementAutomationPeer, System.Windows.Automation.Provider.ITransformProvider
    {
        public ResizerAutomationPeer(Radical.Windows.Controls.Resizer owner) { }
        protected override System.Windows.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { }
        protected override string GetClassNameCore() { }
        public override object GetPattern(System.Windows.Automation.Peers.PatternInterface patternInterface) { }
    }
}
namespace Radical.Windows.Controls
{
    public class BackgroundVisualHost : System.Windows.FrameworkElement
    {
        public BackgroundVisualHost(System.Func<System.Windows.Media.Visual> createContent) { }
        protected override System.Collections.IEnumerator LogicalChildren { get; }
        protected override int VisualChildrenCount { get; }
        protected override System.Windows.Media.Visual GetVisualChild(int index) { }
        protected override System.Windows.Size MeasureOverride(System.Windows.Size availableSize) { }
    }
    public abstract class OverlayAdorner : System.Windows.Documents.Adorner
    {
        protected OverlayAdorner(System.Windows.UIElement adornedElement) { }
        protected abstract System.Windows.UIElement Content { get; }
        protected override int VisualChildrenCount { get; }
        protected override System.Windows.Size ArrangeOverride(System.Windows.Size finalSize) { }
        protected override System.Windows.Media.Visual GetVisualChild(int index) { }
        protected override System.Windows.Size MeasureOverride(System.Windows.Size constraint) { }
    }
    public enum ResizeDirection
    {
        NorthEast = 0,
        NorthWest = 1,
        SouthEast = 2,
        SouthWest = 3,
    }
    [System.Windows.TemplatePart(Name="PART_Grip", Type=typeof(System.Windows.FrameworkElement))]
    public class Resizer : System.Windows.Controls.ContentControl
    {
        public static readonly System.Windows.DependencyProperty IsAutoSizeEnabledProperty;
        public static readonly System.Windows.DependencyProperty IsGripEnabledProperty;
        public static readonly System.Windows.DependencyProperty IsGripVisibleProperty;
        public static readonly System.Windows.DependencyProperty ResizeDirectionProperty;
        public Resizer() { }
        public bool IsAutoSizeEnabled { get; set; }
        public bool IsGripEnabled { get; set; }
        public bool IsGripVisible { get; set; }
        public Radical.Windows.Controls.ResizeDirection ResizeDirection { get; set; }
        public static System.Windows.Input.RoutedCommand AutoSizeCommand { get; }
        public static System.Windows.Input.RoutedCommand EndResizeCommand { get; }
        public static System.Windows.Input.RoutedCommand StartResizeCommand { get; }
        public static System.Windows.Input.RoutedCommand UpdateSizeCommand { get; }
        protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { }
    }
    public class VisualTargetPresentationSource : System.Windows.PresentationSource
    {
        public VisualTargetPresentationSource(System.Windows.Media.HostVisual hostVisual) { }
        public System.Windows.Size DesiredSize { get; }
        public override bool IsDisposed { get; }
        public override System.Windows.Media.Visual RootVisual { get; set; }
        protected override System.Windows.Media.CompositionTarget GetCompositionTargetCore() { }
    }
}
namespace Radical.Windows.Controls.Themes
{
    public sealed class GripAlignmentConverter : System.Windows.Data.IValueConverter
    {
        public GripAlignmentConverter() { }
        public object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
        public object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
    }
    public sealed class GripCursorConverter : System.Windows.Data.IValueConverter
    {
        public GripCursorConverter() { }
        public object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
        public object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
    }
    public sealed class GripRotationConverter : System.Windows.Data.IValueConverter
    {
        public GripRotationConverter() { }
        public object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
        public object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
    }
    public class generic : System.Windows.ResourceDictionary, System.Windows.Markup.IComponentConnector, System.Windows.Markup.IStyleConnector
    {
        public generic() { }
        public void InitializeComponent() { }
    }
}
namespace Radical.Windows.Converters
{
    public abstract class AbstractSingletonConverter : System.Windows.Markup.MarkupExtension, System.Windows.Data.IValueConverter
    {
        protected AbstractSingletonConverter() { }
        public abstract object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture);
        public abstract object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture);
        public override sealed object ProvideValue(System.IServiceProvider serviceProvider) { }
    }
    [System.Windows.Markup.MarkupExtensionReturnType(typeof(Radical.Windows.Converters.BinaryImageConverter))]
    public class BinaryImageConverter : Radical.Windows.Converters.AbstractSingletonConverter
    {
        public BinaryImageConverter() { }
        public override object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
        public override object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
    }
    [System.Windows.Markup.MarkupExtensionReturnType(typeof(Radical.Windows.Converters.BooleanBusyStatusConverter))]
    public sealed class BooleanBusyStatusConverter : Radical.Windows.Converters.AbstractSingletonConverter
    {
        public BooleanBusyStatusConverter() { }
        public override object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
        public override object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
    }
    public class BooleanConverter : System.Windows.Data.IValueConverter
    {
        public BooleanConverter() { }
        public object FalseValue { get; set; }
        public object TrueValue { get; set; }
        public object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
        public object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
    }
    [System.Windows.Markup.MarkupExtensionReturnType(typeof(Radical.Windows.Converters.BooleanToVisibilityConverter))]
    public class BooleanToVisibilityConverter : System.Windows.Data.IValueConverter
    {
        public BooleanToVisibilityConverter() { }
        public System.Windows.Visibility FalseValue { get; set; }
        public System.Windows.Visibility TrueValue { get; set; }
        public object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
        public object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
    }
    public class EnumBooleanConverter : System.Windows.Data.IValueConverter
    {
        public EnumBooleanConverter() { }
        public object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
        public object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
        public bool HasFlag(System.Enum variable, System.Enum value) { }
    }
    [System.Windows.Markup.MarkupExtensionReturnType(typeof(Radical.Windows.Converters.EnumCaptionConverter))]
    public sealed class EnumCaptionConverter : Radical.Windows.Converters.AbstractSingletonConverter
    {
        public EnumCaptionConverter() { }
        public override object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
        public override object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
    }
    [System.Windows.Markup.MarkupExtensionReturnType(typeof(Radical.Windows.Converters.EnumDescriptionConverter))]
    public sealed class EnumDescriptionConverter : Radical.Windows.Converters.AbstractSingletonConverter
    {
        public EnumDescriptionConverter() { }
        public override object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
        public override object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
    }
    [System.Windows.Markup.MarkupExtensionReturnType(typeof(Radical.Windows.Converters.LinqFirstOrDefaultConverter))]
    public class LinqFirstOrDefaultConverter : Radical.Windows.Converters.AbstractSingletonConverter
    {
        public LinqFirstOrDefaultConverter() { }
        public override object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
        public override object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
    }
    [System.Windows.Data.ValueConversion(typeof(bool), typeof(bool))]
    [System.Windows.Markup.MarkupExtensionReturnType(typeof(Radical.Windows.Converters.NotConverter))]
    public sealed class NotConverter : Radical.Windows.Converters.AbstractSingletonConverter
    {
        public NotConverter() { }
        public override object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
        public override object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
    }
    [System.Windows.Markup.MarkupExtensionReturnType(typeof(Radical.Windows.Converters.BooleanToVisibilityConverter))]
    public class NullToVisibilityConverter : System.Windows.Data.IValueConverter
    {
        public NullToVisibilityConverter() { }
        public System.Windows.Visibility NullValue { get; set; }
        public object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
        public object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
    }
    [System.Windows.Markup.MarkupExtensionReturnType(typeof(Radical.Windows.Converters.TimeSpanToKeyTimeConverter))]
    public class TimeSpanToKeyTimeConverter : Radical.Windows.Converters.AbstractSingletonConverter
    {
        public TimeSpanToKeyTimeConverter() { }
        public override object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
        public override object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
    }
}
namespace Radical.Windows.Effects
{
    public class GrayscaleEffect : System.Windows.Media.Effects.ShaderEffect
    {
        public static readonly System.Windows.DependencyProperty DesaturationFactorProperty;
        public static readonly System.Windows.DependencyProperty InputProperty;
        public GrayscaleEffect() { }
        public double DesaturationFactor { get; set; }
        public System.Windows.Media.Brush Input { get; set; }
    }
}
namespace Radical.Windows.Input
{
    public static class CommandExtensions
    {
        public static System.Collections.Generic.IEnumerable<System.Windows.Input.InputGesture> GetGestures(this System.Windows.Input.ICommand source) { }
    }
    public class DelegateCommand : Radical.ComponentModel.Windows.Input.IDelegateCommand, System.Windows.IWeakEventListener, System.Windows.Input.ICommand
    {
        public static readonly Radical.ComponentModel.Windows.Input.IDelegateCommand Empty;
        public DelegateCommand(System.Action<object> executeMethod, System.Func<object, bool> canExecuteMethod, string displayText) { }
        public string DisplayText { get; }
        public System.Windows.Input.InputBindingCollection InputBindings { get; }
        public event System.EventHandler CanExecuteChanged;
        public Radical.ComponentModel.Windows.Input.IDelegateCommand AddGesture(System.Windows.Input.InputGesture gesture) { }
        public Radical.ComponentModel.Windows.Input.IDelegateCommand AddKeyGesture(System.Windows.Input.Key key) { }
        public Radical.ComponentModel.Windows.Input.IDelegateCommand AddKeyGesture(System.Windows.Input.Key key, System.Windows.Input.ModifierKeys mk) { }
        public Radical.ComponentModel.Windows.Input.IDelegateCommand AddMonitor(Radical.ComponentModel.IMonitor source) { }
        public Radical.ComponentModel.Windows.Input.IDelegateCommand AddMonitor(params Radical.ComponentModel.IMonitor[] triggers) { }
        public bool CanExecute(object parameter) { }
        public virtual void EvaluateCanExecute() { }
        public void Execute(object parameter) { }
        public virtual Radical.ComponentModel.Windows.Input.IDelegateCommand OnCanExecute(System.Func<object, bool> canExecuteMethod) { }
        protected virtual void OnCanExecuteChanged() { }
        public virtual Radical.ComponentModel.Windows.Input.IDelegateCommand OnExecute(System.Action<object> executeMethod) { }
        protected virtual void OnTriggerChanged(Radical.ComponentModel.IMonitor source) { }
        public Radical.ComponentModel.Windows.Input.IDelegateCommand RemoveMonitor(Radical.ComponentModel.IMonitor source) { }
        public Radical.ComponentModel.Windows.Input.IDelegateCommand WithTrackingPreview(System.Action<Radical.Analytics.AnalyticsEvent> onBeforeTracking) { }
        public static Radical.ComponentModel.Windows.Input.IDelegateCommand Create() { }
        public static Radical.ComponentModel.Windows.Input.IDelegateCommand Create(string displayText) { }
    }
    public static class DelegateCommandExtensions
    {
        public static Radical.ComponentModel.Windows.Input.IDelegateCommand Observe<TSource>(this Radical.ComponentModel.Windows.Input.IDelegateCommand command, TSource source, params System.Linq.Expressions.Expression<>[] properties)
            where TSource : System.ComponentModel.INotifyPropertyChanged { }
    }
}
namespace Radical.Windows
{
    public sealed class LoadedWeakEventManager : System.Windows.WeakEventManager
    {
        protected override void StartListening(object source) { }
        protected override void StopListening(object source) { }
        public static void AddListener(System.Windows.FrameworkElement source, System.Windows.IWeakEventListener listener) { }
        public static void RemoveListener(System.Windows.FrameworkElement source, System.Windows.IWeakEventListener listener) { }
    }
    public sealed class MonitorChangedWeakEventManager : System.Windows.WeakEventManager
    {
        protected override void StartListening(object source) { }
        protected override void StopListening(object source) { }
        public static void AddListener(Radical.ComponentModel.IMonitor source, System.Windows.IWeakEventListener listener) { }
        public static void RemoveListener(Radical.ComponentModel.IMonitor source, System.Windows.IWeakEventListener listener) { }
    }
    public sealed class RandomSolidColorBrush
    {
        public RandomSolidColorBrush() { }
        public System.Windows.Media.SolidColorBrush Next() { }
    }
    public static class VisualTreeCrawler
    {
        public static T FindChild<T>(this System.Windows.DependencyObject source)
            where T : System.Windows.DependencyObject { }
        public static T FindChild<T>(this System.Windows.DependencyObject source, System.Predicate<T> filter)
            where T : System.Windows.DependencyObject { }
        public static System.Collections.Generic.IEnumerable<T> FindChildren<T>(this System.Windows.DependencyObject source)
            where T : System.Windows.DependencyObject { }
        public static System.Collections.Generic.IEnumerable<T> FindChildren<T>(this System.Windows.DependencyObject source, System.Predicate<T> filter)
            where T : System.Windows.DependencyObject { }
        public static T FindParent<T>(this System.Windows.DependencyObject obj)
            where T : System.Windows.DependencyObject { }
        public static T FindParent<T>(this System.Windows.DependencyObject obj, System.Predicate<T> matchCondition)
            where T : System.Windows.DependencyObject { }
        public static bool IsChildOfType<T>(System.Windows.DependencyObject obj)
            where T : System.Windows.DependencyObject { }
    }
}
namespace Radical.Windows.Markup
{
    public class AutoCommandBinding : Radical.Windows.Markup.CommandBinding
    {
        public AutoCommandBinding() { }
        public AutoCommandBinding(string path) { }
        protected override Radical.ComponentModel.Windows.Input.IDelegateCommand GetCommand(System.Windows.DependencyObject target, System.Windows.DependencyProperty targetProperty) { }
        protected virtual Radical.Windows.CommandBuilders.DelegateCommandBuilder GetCommandBuilder() { }
        protected override void OnDataContextChanged(System.Windows.DependencyObject obj, System.Windows.DependencyProperty targetProperty, object newValue, object oldValue) { }
        public override object ProvideValue(System.IServiceProvider provider) { }
    }
    public class BehaviorAutoCommandBinding : Radical.Windows.Markup.AutoCommandBinding
    {
        public BehaviorAutoCommandBinding() { }
        protected override Radical.Windows.CommandBuilders.DelegateCommandBuilder GetCommandBuilder() { }
        protected override void OnProvideValue(System.IServiceProvider provider, object value) { }
        protected override void SetInputBindings(System.Windows.DependencyObject target, System.Windows.Input.ICommandSource source, Radical.ComponentModel.Windows.Input.IDelegateCommand command) { }
    }
    public class BehaviorCommandBinding : Radical.Windows.Markup.CommandBinding
    {
        public BehaviorCommandBinding() { }
        protected override Radical.ComponentModel.Windows.Input.IDelegateCommand GetCommand(System.Windows.DependencyObject target, System.Windows.DependencyProperty targetProperty) { }
        protected override void OnProvideValue(System.IServiceProvider provider, object value) { }
        protected override void SetInputBindings(System.Windows.DependencyObject target, System.Windows.Input.ICommandSource source, Radical.ComponentModel.Windows.Input.IDelegateCommand command) { }
    }
    [System.Windows.Markup.MarkupExtensionReturnType(typeof(object))]
    public abstract class BindingDecoratorBase : System.Windows.Markup.MarkupExtension
    {
        protected BindingDecoratorBase() { }
        protected BindingDecoratorBase(string path) { }
        [System.ComponentModel.DefaultValue(null)]
        public object AsyncState { get; set; }
        [System.ComponentModel.Browsable(false)]
        public System.Windows.Data.Binding Binding { get; set; }
        [System.ComponentModel.DefaultValue(false)]
        public bool BindsDirectlyToSource { get; set; }
        [System.ComponentModel.DefaultValue(null)]
        public System.Windows.Data.IValueConverter Converter { get; set; }
        [System.ComponentModel.DefaultValue(null)]
        [System.ComponentModel.TypeConverter(typeof(System.Windows.CultureInfoIetfLanguageTagConverter))]
        public System.Globalization.CultureInfo ConverterCulture { get; set; }
        [System.ComponentModel.DefaultValue(null)]
        public object ConverterParameter { get; set; }
        [System.ComponentModel.DefaultValue(null)]
        public string ElementName { get; set; }
        [System.ComponentModel.DefaultValue(null)]
        public object FallbackValue { get; set; }
        [System.ComponentModel.DefaultValue(false)]
        public bool IsAsync { get; set; }
        [System.ComponentModel.DefaultValue(System.Windows.Data.BindingMode.Default)]
        public System.Windows.Data.BindingMode Mode { get; set; }
        [System.ComponentModel.DefaultValue(false)]
        public bool NotifyOnSourceUpdated { get; set; }
        [System.ComponentModel.DefaultValue(false)]
        public bool NotifyOnTargetUpdated { get; set; }
        [System.ComponentModel.DefaultValue(false)]
        public bool NotifyOnValidationError { get; set; }
        [System.ComponentModel.DefaultValue(null)]
        public System.Windows.PropertyPath Path { get; set; }
        [System.ComponentModel.DefaultValue(null)]
        public System.Windows.Data.RelativeSource RelativeSource { get; set; }
        [System.ComponentModel.DefaultValue(null)]
        public object Source { get; set; }
        [System.ComponentModel.DefaultValue(null)]
        public object TargetNullValue { get; set; }
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public System.Windows.Data.UpdateSourceExceptionFilterCallback UpdateSourceExceptionFilter { get; set; }
        [System.ComponentModel.DefaultValue(System.Windows.Data.UpdateSourceTrigger.Default)]
        public System.Windows.Data.UpdateSourceTrigger UpdateSourceTrigger { get; set; }
        [System.ComponentModel.DefaultValue(false)]
        public bool ValidatesOnDataErrors { get; set; }
        [System.ComponentModel.DefaultValue(false)]
        public bool ValidatesOnExceptions { get; set; }
        [System.ComponentModel.DefaultValue(null)]
        public System.Collections.ObjectModel.Collection<System.Windows.Controls.ValidationRule> ValidationRules { get; }
        [System.ComponentModel.DefaultValue(null)]
        public string XPath { get; set; }
        protected bool IsUsingSharedDependencyProperty(System.IServiceProvider provider) { }
        public override object ProvideValue(System.IServiceProvider provider) { }
        protected bool TryGetTargetItems(System.IServiceProvider provider, out System.Windows.DependencyObject target, out System.Windows.DependencyProperty dp) { }
        protected virtual bool TryGetTargetItems<T>(System.IServiceProvider provider, out T target, out System.Windows.DependencyProperty dp)
            where T : System.Windows.DependencyObject { }
    }
    public class ChoosenItemBinding : Radical.Windows.Markup.BindingDecoratorBase
    {
        public ChoosenItemBinding() { }
        public ChoosenItemBinding(string path) { }
    }
    public class CommandBinding : Radical.Windows.Markup.BindingDecoratorBase
    {
        public CommandBinding() { }
        public CommandBinding(string path) { }
        protected virtual Radical.ComponentModel.Windows.Input.IDelegateCommand GetCommand(System.Windows.DependencyObject target, System.Windows.DependencyProperty targetProperty) { }
        protected virtual System.Windows.FrameworkElement GetRootElement(System.Windows.FrameworkElement fe) { }
        protected virtual void OnDataContextChanged(System.Windows.DependencyObject obj, System.Windows.DependencyProperty targetProperty, object newValue, object oldValue) { }
        protected virtual void OnProvideValue(System.IServiceProvider provider, object value) { }
        protected virtual void OnTargetLoaded(System.Windows.DependencyObject target, System.Windows.DependencyProperty targetProperty) { }
        public override object ProvideValue(System.IServiceProvider provider) { }
        protected virtual void SetInputBindings(System.Windows.DependencyObject target, System.Windows.Input.ICommandSource source, Radical.ComponentModel.Windows.Input.IDelegateCommand command) { }
    }
    public class EditorBinding : Radical.Windows.Markup.BindingDecoratorBase
    {
        public EditorBinding() { }
        public EditorBinding(string path) { }
    }
    [System.Windows.Markup.ContentProperty("TypeArguments")]
    public class TypeExtension : System.Windows.Markup.MarkupExtension
    {
        public TypeExtension() { }
        public TypeExtension(string typeName) { }
        public TypeExtension(string typeName, System.Type typeArgument1) { }
        public TypeExtension(string typeName, System.Type typeArgument1, System.Type typeArgument2) { }
        public TypeExtension(string typeName, System.Type typeArgument1, System.Type typeArgument2, System.Type typeArgument3) { }
        public TypeExtension(string typeName, System.Type typeArgument1, System.Type typeArgument2, System.Type typeArgument3, System.Type typeArgument4) { }
        public System.Type Type { get; set; }
        [System.Windows.Markup.ConstructorArgument("typeArgument1")]
        public System.Type TypeArgument1 { get; set; }
        [System.Windows.Markup.ConstructorArgument("typeArgument2")]
        public System.Type TypeArgument2 { get; set; }
        [System.Windows.Markup.ConstructorArgument("typeArgument3")]
        public System.Type TypeArgument3 { get; set; }
        [System.Windows.Markup.ConstructorArgument("typeArgument4")]
        public System.Type TypeArgument4 { get; set; }
        public System.Collections.Generic.IList<System.Type> TypeArguments { get; }
        [System.Windows.Markup.ConstructorArgument("typeName")]
        public string TypeName { get; set; }
        public override object ProvideValue(System.IServiceProvider serviceProvider) { }
    }
}
namespace Radical.Windows.Model
{
    public class ObservableEntityCollection<T> : Radical.Model.MementoEntityCollection<T>, System.Collections.Specialized.INotifyCollectionChanged, System.ComponentModel.INotifyPropertyChanged
    {
        public ObservableEntityCollection() { }
        public ObservableEntityCollection(System.Collections.Generic.IEnumerable<T> collection) { }
        public ObservableEntityCollection(int capcity) { }
        protected ObservableEntityCollection(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        public override void EndInit(bool notify) { }
        protected override void OnAddCompleted(int index, T value) { }
        protected override void OnAddRange(System.Collections.Generic.IEnumerable<T> rangeToAdd) { }
        protected override void OnAddRangeCompleted(System.Collections.Generic.IEnumerable<T> addedRange) { }
        protected override void OnClearCompleted(System.Collections.Generic.IEnumerable<T> clearedItems) { }
        protected override void OnCollectionChanged(Radical.ComponentModel.CollectionChangedEventArgs<T> e) { }
        protected virtual void OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs e) { }
        protected override void OnDeserializationCompleted(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        protected override void OnInsertCompleted(int index, T value) { }
        protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e) { }
        protected void OnPropertyChanged<TValue>(System.Linq.Expressions.Expression<System.Func<TValue>> property) { }
        protected override void OnRemoveCompleted(T value, int index) { }
    }
}
namespace Radical.Windows.Presentation
{
    public abstract class AbstractMementoViewModel : Radical.Model.MementoEntity, Radical.Windows.ComponentModel.IViewModel, System.ComponentModel.INotifyPropertyChanged
    {
        protected AbstractMementoViewModel() { }
        protected AbstractMementoViewModel(Radical.ComponentModel.ChangeTracking.ChangeTrackingRegistration registration) { }
        protected Radical.Windows.ComponentModel.ValidationBehavior DefaultValidationBehavior { get; set; }
        [Radical.Model.MementoPropertyMetadata(TrackChanges=false)]
        [Radical.Model.SkipPropertyValidation]
        [System.ComponentModel.Bindable(false)]
        public string FocusedElementKey { get; set; }
        [Radical.Model.SkipPropertyValidation]
        [System.ComponentModel.Bindable(false)]
        public bool HasErrors { get; }
        [Radical.Model.SkipPropertyValidation]
        protected bool IsResettingValidation { get; }
        [Radical.Model.SkipPropertyValidation]
        protected bool IsTriggeringValidation { get; }
        [Radical.Model.SkipPropertyValidation]
        [System.ComponentModel.Bindable(false)]
        public bool IsValid { get; }
        [Radical.Model.SkipPropertyValidation]
        protected virtual bool IsValidationEnabled { get; }
        [Radical.Model.SkipPropertyValidation]
        protected bool RunValidationOnPropertyChanged { get; set; }
        [Radical.Model.SkipPropertyValidation]
        [System.ComponentModel.Bindable(false)]
        public virtual System.Collections.ObjectModel.ObservableCollection<Radical.Validation.ValidationError> ValidationErrors { get; }
        [Radical.Model.SkipPropertyValidation]
        protected Radical.Windows.ComponentModel.IValidationService ValidationService { get; set; }
        public event System.EventHandler<System.ComponentModel.DataErrorsChangedEventArgs> ErrorsChanged;
        public event System.EventHandler Validated;
        public System.Collections.IEnumerable GetErrors(string propertyName) { }
        protected string GetPropertyDisplayName(string propertyName) { }
        protected virtual void MoveFocusTo(string focusedElementKey) { }
        protected virtual void MoveFocusTo<T>(System.Linq.Expressions.Expression<System.Func<T>> property) { }
        protected virtual void OnAcceptingChanges(System.ComponentModel.CancelEventArgs e) { }
        protected virtual void OnChangesAccepted() { }
        protected virtual void OnChangesRejected() { }
        protected void OnErrorsChanged(string propertyName) { }
        protected override void OnMementoChanged(Radical.ComponentModel.ChangeTracking.IChangeTrackingService newMemento, Radical.ComponentModel.ChangeTracking.IChangeTrackingService oldMemento) { }
        protected override void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e) { }
        protected virtual void OnRejectingChanges(System.ComponentModel.CancelEventArgs e) { }
        protected virtual void OnValidated() { }
        public virtual void ResetValidation() { }
        protected virtual bool SkipPropertyValidation(string propertyName) { }
        public virtual void TriggerValidation() { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "IsValid",
                "Errors"})]
        public System.ValueTuple<bool, System.Collections.Generic.IEnumerable<Radical.Validation.ValidationError>> Validate() { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "IsValid",
                "Errors"})]
        public System.ValueTuple<bool, System.Collections.Generic.IEnumerable<Radical.Validation.ValidationError>> Validate(Radical.Windows.ComponentModel.ValidationBehavior behavior) { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "IsValid",
                "Errors"})]
        protected System.ValueTuple<bool, System.Collections.Generic.IEnumerable<Radical.Validation.ValidationError>> ValidateProperty(string propertyName) { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "IsValid",
                "Errors"})]
        protected virtual System.ValueTuple<bool, System.Collections.Generic.IEnumerable<Radical.Validation.ValidationError>> ValidateProperty(string propertyName, Radical.Windows.ComponentModel.ValidationBehavior behavior) { }
    }
    public abstract class AbstractViewModel : Radical.Model.Entity, Radical.Windows.ComponentModel.IViewModel, System.ComponentModel.INotifyPropertyChanged, System.ComponentModel.ISupportInitialize
    {
        protected AbstractViewModel() { }
        protected Radical.Windows.ComponentModel.ValidationBehavior DefaultValidationBehavior { get; set; }
        [Radical.Model.MementoPropertyMetadata(TrackChanges=false)]
        [Radical.Model.SkipPropertyValidation]
        [System.ComponentModel.Bindable(false)]
        public string FocusedElementKey { get; set; }
        [Radical.Model.SkipPropertyValidation]
        [System.ComponentModel.Bindable(false)]
        public bool HasErrors { get; }
        [Radical.Model.SkipPropertyValidation]
        protected bool IsResettingValidation { get; }
        [Radical.Model.SkipPropertyValidation]
        protected bool IsTriggeringValidation { get; }
        [Radical.Model.SkipPropertyValidation]
        [System.ComponentModel.Bindable(false)]
        public bool IsValid { get; }
        [Radical.Model.SkipPropertyValidation]
        protected virtual bool IsValidationEnabled { get; }
        [Radical.Model.SkipPropertyValidation]
        protected bool RunValidationOnPropertyChanged { get; set; }
        [Radical.Model.SkipPropertyValidation]
        [System.ComponentModel.Bindable(false)]
        public virtual System.Collections.ObjectModel.ObservableCollection<Radical.Validation.ValidationError> ValidationErrors { get; }
        [Radical.Model.SkipPropertyValidation]
        protected Radical.Windows.ComponentModel.IValidationService ValidationService { get; set; }
        public event System.EventHandler<System.ComponentModel.DataErrorsChangedEventArgs> ErrorsChanged;
        public event System.EventHandler Validated;
        public System.Collections.IEnumerable GetErrors(string propertyName) { }
        protected string GetPropertyDisplayName(string propertyName) { }
        protected virtual void MoveFocusTo(string focusedElementKey) { }
        protected virtual void MoveFocusTo<T>(System.Linq.Expressions.Expression<System.Func<T>> property) { }
        protected void OnErrorsChanged(string propertyName) { }
        protected override void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e) { }
        protected virtual void OnValidated() { }
        public virtual void ResetValidation() { }
        protected virtual bool SkipPropertyValidation(string propertyName) { }
        public virtual void TriggerValidation() { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "IsValid",
                "Errors"})]
        public System.ValueTuple<bool, System.Collections.Generic.IEnumerable<Radical.Validation.ValidationError>> Validate() { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "IsValid",
                "Errors"})]
        public virtual System.ValueTuple<bool, System.Collections.Generic.IEnumerable<Radical.Validation.ValidationError>> Validate(Radical.Windows.ComponentModel.ValidationBehavior behavior) { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "IsValid",
                "Errors"})]
        protected System.ValueTuple<bool, System.Collections.Generic.IEnumerable<Radical.Validation.ValidationError>> ValidateProperty(string propertyName) { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "IsValid",
                "Errors"})]
        protected virtual System.ValueTuple<bool, System.Collections.Generic.IEnumerable<Radical.Validation.ValidationError>> ValidateProperty(string propertyName, Radical.Windows.ComponentModel.ValidationBehavior behavior) { }
    }
    public class Repeat
    {
        public Repeat() { }
        public static Radical.Windows.Presentation.Repeat.Repeater Every(System.TimeSpan delay) { }
        public class Repeater
        {
            public void Stop() { }
            public void This(System.Action action) { }
        }
    }
    public static class ValidationErrorsExtensions
    {
        public static System.Collections.Generic.IEnumerable<string> GetInvalidProperties(this System.Collections.ObjectModel.ObservableCollection<Radical.Validation.ValidationError> validationErrors) { }
    }
    public class Wait
    {
        public Wait() { }
        public static Radical.Windows.Presentation.Wait.Waiter For(System.TimeSpan delay) { }
        public class Waiter
        {
            public void AndThen(System.Action action) { }
        }
    }
}
namespace Radical.Windows.Presentation.Behaviors
{
    public class DependencyObjectCloseHandlerBehavior : Microsoft.Xaml.Behaviors.Behavior<System.Windows.DependencyObject>
    {
        public DependencyObjectCloseHandlerBehavior(Radical.ComponentModel.Messaging.IMessageBroker broker, Radical.Windows.ComponentModel.IConventionsHandler conventions) { }
        protected override void OnAttached() { }
        protected override void OnDetaching() { }
    }
    public class Focus : Radical.Windows.Behaviors.RadicalBehavior<System.Windows.FrameworkElement>
    {
        public static readonly System.Windows.DependencyProperty ControlledByProperty;
        public Focus() { }
        public string ControlledBy { get; set; }
        public string UsingKey { get; set; }
        protected override void OnAttached() { }
        protected override void OnDetaching() { }
    }
    public class FrameworkElementLifecycleNotificationsBehavior : Radical.Windows.Behaviors.RadicalBehavior<System.Windows.FrameworkElement>
    {
        public FrameworkElementLifecycleNotificationsBehavior(Radical.ComponentModel.Messaging.IMessageBroker broker, Radical.Windows.ComponentModel.IConventionsHandler conventions) { }
        protected override void OnAttached() { }
        protected override void OnDetaching() { }
    }
    public class WindowLifecycleNotificationsBehavior : Radical.Windows.Behaviors.RadicalBehavior<System.Windows.Window>
    {
        public WindowLifecycleNotificationsBehavior(Radical.ComponentModel.Messaging.IMessageBroker broker, Radical.Windows.ComponentModel.IConventionsHandler conventions) { }
        protected override void OnAttached() { }
        protected override void OnDetaching() { }
    }
}
namespace Radical.Windows.Presentation.Boot
{
    public class ApplicationBootstrapper
    {
        public ApplicationBootstrapper() { }
        public void Boot() { }
        public Radical.Windows.Presentation.Boot.ApplicationBootstrapper DisableAutoBoot() { }
        public Radical.Windows.Presentation.Boot.ApplicationBootstrapper EnableSplashScreen(Radical.Windows.Presentation.Boot.SplashScreenConfiguration config = null) { }
        public Radical.Windows.Presentation.Boot.ApplicationBootstrapper ExposeAsResource<TService>() { }
        public Radical.Windows.Presentation.Boot.ApplicationBootstrapper ExposeAsResource<TService, TView>()
            where TView : System.Windows.FrameworkElement { }
        public Radical.Windows.Presentation.Boot.ApplicationBootstrapper OnBeforeInstall(System.Action<Radical.Windows.Presentation.Boot.BootstrapConventions, Radical.Windows.Presentation.Boot.AssemblyScanner> onBeforeInstall) { }
        public Radical.Windows.Presentation.Boot.ApplicationBootstrapper OnBoot(System.Action<System.IServiceProvider> bootHandler) { }
        public Radical.Windows.Presentation.Boot.ApplicationBootstrapper OnBootCompleted(System.Action<System.IServiceProvider> bootCompletedHandler) { }
        public Radical.Windows.Presentation.Boot.ApplicationBootstrapper OnServiceProviderCreated(System.Action<System.IServiceProvider> onServiceProviderCreated) { }
        public Radical.Windows.Presentation.Boot.ApplicationBootstrapper OnShutdown(System.Action<Radical.Windows.Presentation.Boot.ApplicationShutdownArgs> shutdownHandler) { }
        public Radical.Windows.Presentation.Boot.ApplicationBootstrapper OnSingletonApplicationStartup(System.Action<Radical.Windows.Presentation.Boot.SingletonApplicationStartupArgs> onSingletonApplicationStartup) { }
        public Radical.Windows.Presentation.Boot.ApplicationBootstrapper OnUnhandledException(System.Action<System.Exception> unhandledExceptionHandler) { }
        public Radical.Windows.Presentation.Boot.ApplicationBootstrapper OverrideShutdownMode(System.Windows.ShutdownMode mode) { }
        public Radical.Windows.Presentation.Boot.ApplicationBootstrapper RegisterAsSingleton(string key) { }
        public Radical.Windows.Presentation.Boot.ApplicationBootstrapper RegisterAsSingleton(string key, Radical.Windows.Presentation.Boot.SingletonApplicationScope scope) { }
        public void Shutdown() { }
        public Radical.Windows.Presentation.Boot.ApplicationBootstrapper UsingAsCurrentCulture(System.Func<System.Globalization.CultureInfo> currentCultureHandler) { }
        public Radical.Windows.Presentation.Boot.ApplicationBootstrapper UsingAsCurrentUICulture(System.Func<System.Globalization.CultureInfo> currentUICultureHandler) { }
        public Radical.Windows.Presentation.Boot.ApplicationBootstrapper UsingAsShell(System.Type shellViewType) { }
        public Radical.Windows.Presentation.Boot.ApplicationBootstrapper UsingAsShell<TShellType>()
            where TShellType : System.Windows.Window { }
    }
    public class ApplicationBootstrapper<TMainView> : Radical.Windows.Presentation.Boot.ApplicationBootstrapper
        where TMainView : System.Windows.Window
    {
        public ApplicationBootstrapper() { }
    }
    public class ApplicationShutdownArgs
    {
        public ApplicationShutdownArgs() { }
        public bool IsBootCompleted { get; }
        public Radical.Windows.Presentation.Boot.ApplicationShutdownReason Reason { get; }
    }
    public enum ApplicationShutdownReason
    {
        UserRequest = 0,
        MultipleInstanceNotAllowed = 1,
        SessionEnding = 2,
        ApplicationRequest = 3,
    }
    public class AssemblyScanner
    {
        public System.IO.SearchOption DirectorySearchOptions { get; set; }
        public void AddAssemblyFilter(System.Func<string, Radical.Windows.Presentation.Boot.AssemblyScanner.FilterResults> filter) { }
        public enum FilterResults
        {
            Exclude = 0,
            Include = 1,
        }
    }
    public class BootstrapConventions
    {
        public BootstrapConventions() { }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Predicate<System.Type> AllowServiceOverride { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Func<System.Reflection.Assembly, System.Collections.Generic.IEnumerable<string>> AssemblyFileScanPatterns { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Predicate<System.Type> DefaultAllowServiceOverride { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Func<System.Reflection.Assembly, System.Collections.Generic.IEnumerable<string>> DefaultAssemblyFileScanPatterns { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Func<System.Type, string> DefaultGetInterestedRegionNameIfAny { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Func<System.Reflection.PropertyInfo, bool> DefaultIgnorePropertyInjection { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Func<System.Reflection.PropertyInfo, bool> DefaultIgnoreViewModelPropertyInjection { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Func<System.Reflection.PropertyInfo, bool> DefaultIgnoreViewPropertyInjection { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Predicate<System.Reflection.Assembly> DefaultIncludeAssemblyInContainerScan { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Predicate<System.Type> DefaultIsConcreteType { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Func<System.Type, bool> DefaultIsExcluded { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Predicate<System.Type> DefaultIsMessageHandler { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Predicate<System.Type> DefaultIsService { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Func<System.Collections.Generic.IEnumerable<System.Type>, System.Type, bool> DefaultIsShellView { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Func<System.Collections.Generic.IEnumerable<System.Type>, System.Type, bool> DefaultIsShellViewModel { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Predicate<System.Type> DefaultIsView { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Predicate<System.Type> DefaultIsViewModel { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Func<System.Type, System.Collections.Generic.IEnumerable<System.Type>> DefaultSelectMessageHandlerContracts { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Func<System.Type, System.Collections.Generic.IEnumerable<System.Type>> DefaultSelectServiceContracts { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Func<System.Type, System.Collections.Generic.IEnumerable<System.Type>> DefaultSelectViewContracts { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Func<System.Type, System.Collections.Generic.IEnumerable<System.Type>> DefaultSelectViewModelContracts { get; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Func<System.Type, string> GetInterestedRegionNameIfAny { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Func<System.Reflection.PropertyInfo, bool> IgnorePropertyInjection { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Func<System.Reflection.PropertyInfo, bool> IgnoreViewModelPropertyInjection { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Func<System.Reflection.PropertyInfo, bool> IgnoreViewPropertyInjection { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Predicate<System.Reflection.Assembly> IncludeAssemblyInContainerScan { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Predicate<System.Type> IsConcreteType { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Func<System.Type, bool> IsExcluded { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Predicate<System.Type> IsMessageHandler { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Predicate<System.Type> IsService { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Func<System.Collections.Generic.IEnumerable<System.Type>, System.Type, bool> IsShellView { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Func<System.Collections.Generic.IEnumerable<System.Type>, System.Type, bool> IsShellViewModel { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Predicate<System.Type> IsView { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Predicate<System.Type> IsViewModel { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Func<System.Type, System.Collections.Generic.IEnumerable<System.Type>> SelectMessageHandlerContracts { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Func<System.Type, System.Collections.Generic.IEnumerable<System.Type>> SelectServiceContracts { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Func<System.Type, System.Collections.Generic.IEnumerable<System.Type>> SelectViewContracts { get; set; }
        [Radical.Windows.ComponentModel.IgnorePropertyInjectionAttribue]
        public System.Func<System.Type, System.Collections.Generic.IEnumerable<System.Type>> SelectViewModelContracts { get; set; }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.All)]
    public class DisableAutomaticRegistrationAttribute : System.Attribute
    {
        public DisableAutomaticRegistrationAttribute() { }
    }
    public interface IDependenciesInstaller
    {
        void Install(Radical.Windows.Presentation.Boot.BootstrapConventions conventions, Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Collections.Generic.IEnumerable<System.Type> assemblyScanningResults);
    }
    [Radical.Windows.ComponentModel.ToolkitComponent]
    public interface IExpectBootCallback
    {
        void OnBootCompleted();
    }
    [Radical.Windows.ComponentModel.ToolkitComponent]
    public interface IExpectShutdownCallback
    {
        void OnShutdown(Radical.Windows.Presentation.Boot.ApplicationShutdownReason reason);
    }
    public enum SingletonApplicationScope
    {
        NotSupported = 0,
        Global = 1,
        Local = 2,
    }
    public class SingletonApplicationStartupArgs
    {
        public SingletonApplicationStartupArgs(Radical.Windows.Presentation.Boot.SingletonApplicationScope scope) { }
        public bool AllowStartup { get; set; }
        public Radical.Windows.Presentation.Boot.SingletonApplicationScope Scope { get; }
    }
    public class SplashScreenConfiguration
    {
        public SplashScreenConfiguration() { }
        public double Height { get; set; }
        public double? MinHeight { get; set; }
        public double? MinWidth { get; set; }
        public int MinimumDelay { get; set; }
        public System.Windows.SizeToContent SizeToContent { get; set; }
        public System.Type SplashScreenViewType { get; set; }
        public System.Action<System.IServiceProvider> StartupAsyncWork { get; set; }
        public double Width { get; set; }
        public System.Windows.WindowStartupLocation WindowStartupLocation { get; set; }
        public System.Windows.WindowStyle WindowStyle { get; set; }
    }
}
namespace Radical.Windows.Presentation.Helpers
{
    public class EnvironmentHelper
    {
        public EnvironmentHelper() { }
        public static string GetCurrentDirectory() { }
    }
}
namespace Radical.Windows.Presentation.Messaging
{
    public class ApplicationBootCompleted
    {
        public ApplicationBootCompleted() { }
    }
    public class ApplicationShutdown
    {
        public ApplicationShutdown(Radical.Windows.Presentation.Boot.ApplicationShutdownReason reason) { }
        public Radical.Windows.Presentation.Boot.ApplicationShutdownReason Reason { get; }
    }
    public class ApplicationShutdownCanceled
    {
        public ApplicationShutdownCanceled(Radical.Windows.Presentation.Boot.ApplicationShutdownReason reason) { }
        public Radical.Windows.Presentation.Boot.ApplicationShutdownReason Reason { get; }
    }
    public class ApplicationShutdownRequest
    {
        public ApplicationShutdownRequest() { }
    }
    public class ApplicationShutdownRequested
    {
        public ApplicationShutdownRequested(Radical.Windows.Presentation.Boot.ApplicationShutdownReason reason) { }
        public bool Cancel { get; set; }
        public Radical.Windows.Presentation.Boot.ApplicationShutdownReason Reason { get; }
    }
    public class CloseViewRequest
    {
        public CloseViewRequest(object viewOwner) { }
        public bool? DialogResult { get; set; }
        public object ViewOwner { get; }
    }
    public class ViewLoaded
    {
        public ViewLoaded(System.Windows.DependencyObject view) { }
        public System.Windows.DependencyObject View { get; }
    }
    public class ViewModelActivated
    {
        public ViewModelActivated(object viewModel) { }
        public object ViewModel { get; }
    }
    public class ViewModelClosed
    {
        public ViewModelClosed(object viewModel) { }
        public object ViewModel { get; }
    }
    public class ViewModelClosing
    {
        public ViewModelClosing(object viewModel) { }
        public bool Cancel { get; set; }
        public object ViewModel { get; }
    }
    public class ViewModelLoaded
    {
        public ViewModelLoaded(object viewModel) { }
        public object ViewModel { get; }
    }
    public class ViewModelShown
    {
        public ViewModelShown(object viewModel) { }
        public object ViewModel { get; }
    }
}
namespace Radical.Windows.Presentation.Regions
{
    public sealed class ContentPresenterRegion : Radical.Windows.Presentation.Regions.ContentRegion<System.Windows.Controls.ContentPresenter>
    {
        public ContentPresenterRegion() { }
        public ContentPresenterRegion(string name) { }
        protected override System.Windows.DependencyObject OnGetContent() { }
        protected override void OnSetContent(System.Windows.DependencyObject view, System.ComponentModel.CancelEventArgs args) { }
    }
    public abstract class ContentRegion<T> : Radical.Windows.Presentation.Regions.Region<T>, Radical.Windows.ComponentModel.IContentRegion, Radical.Windows.ComponentModel.IRegion
        where T : System.Windows.FrameworkElement
    {
        protected ContentRegion() { }
        protected ContentRegion(string name) { }
        public System.Windows.DependencyObject Content { get; set; }
        protected virtual void OnContentSet(System.Windows.DependencyObject actual, System.Windows.DependencyObject previous) { }
        protected abstract System.Windows.DependencyObject OnGetContent();
        protected abstract void OnSetContent(System.Windows.DependencyObject view, System.ComponentModel.CancelEventArgs args);
        public override void Shutdown() { }
    }
    public abstract class ElementsRegion<T> : Radical.Windows.Presentation.Regions.Region<T>, Radical.Windows.ComponentModel.IElementsRegion, Radical.Windows.ComponentModel.IRegion
        where T : System.Windows.FrameworkElement
    {
        protected ElementsRegion() { }
        protected ElementsRegion(string name) { }
        public void Add(System.Windows.DependencyObject view) { }
        public System.Collections.Generic.IEnumerable<TView> GetElements<TView>()
            where TView : System.Windows.DependencyObject { }
        protected abstract void OnAdd(System.Windows.DependencyObject view);
        protected virtual void OnAdded(System.Windows.DependencyObject view) { }
        protected abstract void OnRemove(System.Windows.DependencyObject view, Radical.Windows.Presentation.Regions.RemoveReason reason);
        protected virtual void OnRemoved(System.Windows.DependencyObject view, Radical.Windows.Presentation.Regions.RemoveReason reason) { }
        public void Remove(System.Windows.DependencyObject view) { }
        protected void Remove(System.Windows.DependencyObject view, Radical.Windows.Presentation.Regions.RemoveReason reason) { }
        public override void Shutdown() { }
    }
    public sealed class PanelRegion : Radical.Windows.Presentation.Regions.ElementsRegion<System.Windows.Controls.Panel>
    {
        public PanelRegion() { }
        public PanelRegion(string name) { }
        protected override void OnAdd(System.Windows.DependencyObject view) { }
        protected override void OnRemove(System.Windows.DependencyObject view, Radical.Windows.Presentation.Regions.RemoveReason reason) { }
    }
    public static class RegionExtensions
    {
        public static void AddContentAsync(this Radical.Windows.ComponentModel.IElementsRegion region, System.Func<System.Windows.DependencyObject> viewFactory, int millisecondsDelay = 2000) { }
        public static void SetContentAsync(this Radical.Windows.ComponentModel.IContentRegion region, System.Func<System.Windows.DependencyObject> viewFactory, int millisecondsDelay = 2000) { }
    }
    public static class RegionHeaderedElement
    {
        public static readonly System.Windows.DependencyProperty HeaderProperty;
        public static object GetHeader(System.Windows.DependencyObject element) { }
        public static void SetHeader(System.Windows.DependencyObject element, object value) { }
    }
    public class RegionManager : Radical.Windows.ComponentModel.IRegionManager
    {
        public RegionManager() { }
        public Radical.Windows.ComponentModel.IRegion this[string name] { get; }
        public System.Collections.Generic.IEnumerable<Radical.Windows.ComponentModel.IRegion> GetAllRegisteredRegions() { }
        public Radical.Windows.ComponentModel.IRegion GetRegion(string name) { }
        public TRegion GetRegion<TRegion>(string name)
            where TRegion : Radical.Windows.ComponentModel.IRegion { }
        public void RegisterRegion(Radical.Windows.ComponentModel.IRegion region) { }
        public void Shutdown() { }
        public bool TryGetRegion(string name, out Radical.Windows.ComponentModel.IRegion region) { }
        public bool TryGetRegion<TRegion>(string regionName, out TRegion region)
            where TRegion : Radical.Windows.ComponentModel.IRegion { }
    }
    public class RegionManagerFactory : Radical.Windows.ComponentModel.IRegionManagerFactory
    {
        public RegionManagerFactory(System.IServiceProvider container) { }
        public Radical.Windows.ComponentModel.IRegionManager Create() { }
    }
    public class RegionService : Radical.Windows.ComponentModel.IRegionService
    {
        public static readonly System.Windows.DependencyProperty RegionProperty;
        public RegionService(Radical.Windows.ComponentModel.IRegionManagerFactory regionManagerFactory, Radical.Windows.ComponentModel.IConventionsHandler conventions) { }
        public static Radical.Windows.ComponentModel.IConventionsHandler Conventions { get; set; }
        public static Radical.Windows.ComponentModel.IRegionService CurrentService { get; set; }
        public Radical.Windows.ComponentModel.IRegionManager FindRegionManager(System.Func<System.Windows.DependencyObject, Radical.Windows.ComponentModel.IRegionManager, bool> filter) { }
        public Radical.Windows.ComponentModel.IRegionManager GetKnownRegionManager<TView>()
            where TView : System.Windows.DependencyObject { }
        public Radical.Windows.ComponentModel.IRegionManager GetRegionManager(System.Windows.DependencyObject owner) { }
        public bool HoldsRegionManager(System.Windows.DependencyObject owner) { }
        public Radical.Windows.ComponentModel.IRegionManager RegisterRegionManager(System.Windows.DependencyObject owner) { }
        public void UnregisterRegionManager(System.Windows.DependencyObject owner) { }
        public void UnregisterRegionManager(System.Windows.DependencyObject owner, Radical.Windows.ComponentModel.UnregisterBehavior behavior) { }
        public static Radical.Windows.ComponentModel.IRegion GetRegion(System.Windows.FrameworkElement control) { }
        public static void SetRegion(System.Windows.FrameworkElement control, Radical.Windows.ComponentModel.IRegion value) { }
    }
    [System.Windows.Markup.MarkupExtensionReturnType(typeof(Radical.Windows.ComponentModel.IRegion))]
    public abstract class Region<T> : System.Windows.Markup.MarkupExtension, Radical.Windows.ComponentModel.IRegion
        where T : System.Windows.FrameworkElement
    {
        protected readonly System.Diagnostics.TraceSource Logger;
        protected Region() { }
        protected Region(string name) { }
        public int AsyncLoadDelay { get; set; }
        protected T Element { get; }
        public System.Windows.DependencyObject HostingView { get; }
        public string Name { get; set; }
        protected virtual System.Windows.DependencyObject FindHostingViewOf(System.Windows.FrameworkElement fe) { }
        protected virtual void NotifyClosedAndEnsureRelease(System.Windows.DependencyObject view) { }
        protected virtual void OnElementChanged() { }
        public override sealed object ProvideValue(System.IServiceProvider serviceProvider) { }
        public abstract void Shutdown();
    }
    public enum RemoveReason
    {
        UserRequest = 0,
        InternalRequest = 1,
    }
    public abstract class SwitchingElementsRegion<T> : Radical.Windows.Presentation.Regions.ElementsRegion<T>, Radical.Windows.ComponentModel.IElementsRegion, Radical.Windows.ComponentModel.IRegion, Radical.Windows.ComponentModel.ISwitchingElementsRegion
        where T : System.Windows.FrameworkElement
    {
        protected SwitchingElementsRegion() { }
        protected SwitchingElementsRegion(string name) { }
        public abstract System.Windows.DependencyObject ActiveContent { get; }
        public System.Windows.DependencyObject PreviousActiveContent { get; }
        public event System.EventHandler<Radical.Windows.ComponentModel.ActiveContentChangedEventArgs> ActiveContentChanged;
        public abstract void Activate(System.Windows.DependencyObject content);
        protected virtual void OnActiveContentChanged() { }
        protected virtual object TryGetViewModel(System.Windows.DependencyObject view) { }
    }
    public class TabControlRegion : Radical.Windows.Presentation.Regions.SwitchingElementsRegion<System.Windows.Controls.TabControl>
    {
        public TabControlRegion() { }
        public TabControlRegion(string name) { }
        public override System.Windows.DependencyObject ActiveContent { get; }
        public override void Activate(System.Windows.DependencyObject content) { }
        protected override void OnAdd(System.Windows.DependencyObject view) { }
        protected override void OnRemove(System.Windows.DependencyObject view, Radical.Windows.Presentation.Regions.RemoveReason reason) { }
        protected virtual object TryGetHeader(System.Windows.DependencyObject view) { }
    }
}
namespace Radical.Windows.Presentation.Services.Validation
{
    public abstract class AbstractValidationService : Radical.Windows.ComponentModel.IValidationService
    {
        protected AbstractValidationService() { }
        public bool IsValidationSuspended { get; }
        public bool MergeValidationErrors { get; set; }
        protected abstract System.Collections.Generic.IEnumerable<Radical.Validation.ValidationError> OnValidate();
        protected virtual System.Collections.Generic.IEnumerable<Radical.Validation.ValidationError> OnValidateProperty(string propertyName) { }
        public void ResumeValidation() { }
        public System.IDisposable SuspendValidation() { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "IsValid",
                "Errors"})]
        public System.ValueTuple<bool, System.Collections.Generic.IEnumerable<Radical.Validation.ValidationError>> Validate() { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "IsValid",
                "Errors"})]
        public System.ValueTuple<bool, System.Collections.Generic.IEnumerable<Radical.Validation.ValidationError>> ValidateProperty(string propertyName) { }
    }
    public static class DataAnnotationValidationService
    {
        public static Radical.Windows.Presentation.Services.Validation.DataAnnotationValidationService<TEntity> CreateFor<TEntity>(TEntity entity) { }
    }
    public class DataAnnotationValidationService<TEntity> : Radical.Windows.Presentation.Services.Validation.AbstractValidationService
    {
        public DataAnnotationValidationService(TEntity entity) { }
        public System.Func<string, object, object> PropertyValueGetter { get; set; }
        public Radical.Windows.Presentation.Services.Validation.DataAnnotationValidationService<TEntity> AddRule(System.Linq.Expressions.Expression<System.Func<TEntity, object>> property, System.Func<Radical.Validation.ValidationContext<TEntity>, Radical.Validation.ValidationResult> rule) { }
        protected override System.Collections.Generic.IEnumerable<Radical.Validation.ValidationError> OnValidate() { }
        protected override System.Collections.Generic.IEnumerable<Radical.Validation.ValidationError> OnValidateProperty(string propertyName) { }
    }
    public sealed class DelegateValidationService : Radical.Windows.Presentation.Services.Validation.AbstractValidationService
    {
        public DelegateValidationService(System.Func<System.Collections.Generic.IEnumerable<Radical.Validation.ValidationError>> validationCallback) { }
        protected override System.Collections.Generic.IEnumerable<Radical.Validation.ValidationError> OnValidate() { }
    }
    public sealed class NullValidationService : Radical.Windows.Presentation.Services.Validation.AbstractValidationService
    {
        public static readonly Radical.Windows.ComponentModel.IValidationService Instance;
        protected override System.Collections.Generic.IEnumerable<Radical.Validation.ValidationError> OnValidate() { }
    }
}
namespace Radical.Windows.Threading
{
    public sealed class WpfDispatcher : Radical.ComponentModel.IDispatcher
    {
        public WpfDispatcher(System.Windows.Threading.Dispatcher dispatcher) { }
        public bool IsSafe { get; }
        public void Dispatch(System.Action action) { }
        public TResult Dispatch<TResult>(System.Func<TResult> func) { }
        public void Dispatch<T>(T arg, System.Action<T> action) { }
        public void Dispatch<T1, T2>(T1 arg1, T2 arg2, System.Action<T1, T2> action) { }
        public void Invoke(System.Delegate d, params object[] args) { }
    }
}